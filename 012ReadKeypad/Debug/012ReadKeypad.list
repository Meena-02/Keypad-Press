
012ReadKeypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f68  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080010f0  080010f0  000020f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001130  08001130  0000305c  2**0
                  CONTENTS
  4 .ARM          00000000  08001130  08001130  0000305c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001130  08001130  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001130  08001130  00002130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001134  08001134  00002134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001138  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e47  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000035f  00000000  00000000  00003ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  00004238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c5  00000000  00000000  00004358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cda  00000000  00000000  0000441d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001307  00000000  00000000  000070f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000099bd  00000000  00000000  000083fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00011dbb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009fc  00000000  00000000  00011e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  000127fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080010d8 	.word	0x080010d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	080010d8 	.word	0x080010d8

080001c8 <delay>:
#include "main.h"
//#if !defined(__SOFT_FP__) && defined(__ARM_FP)
//  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
//#endif

void delay(void){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 300000; i++);
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e002      	b.n	80001da <delay+0x12>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3301      	adds	r3, #1
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a04      	ldr	r2, [pc, #16]	@ (80001f0 <delay+0x28>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d9f8      	bls.n	80001d4 <delay+0xc>
}
 80001e2:	bf00      	nop
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	000493df 	.word	0x000493df

080001f4 <main>:

int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0

	/*
	 * Setting the address of registers
	 */
	RCC_AHB1ENR_t *pClkCtrlReg = (RCC_AHB1ENR_t *) 0x40023830;
 80001fa:	4bbe      	ldr	r3, [pc, #760]	@ (80004f4 <main+0x300>)
 80001fc:	617b      	str	r3, [r7, #20]
	GPIOx_MODER_t *pPortDModeReg = (GPIOx_MODER_t *) 0x40020C00;
 80001fe:	4bbe      	ldr	r3, [pc, #760]	@ (80004f8 <main+0x304>)
 8000200:	613b      	str	r3, [r7, #16]
	GPIOx_PUPDR_t *pPortDPUPDReg = (GPIOx_PUPDR_t *) 0x40020C0C;
 8000202:	4bbe      	ldr	r3, [pc, #760]	@ (80004fc <main+0x308>)
 8000204:	60fb      	str	r3, [r7, #12]
	GPIOx_IDR_t *pPortDInReg = (GPIOx_IDR_t *) 0x40020C10;
 8000206:	4bbe      	ldr	r3, [pc, #760]	@ (8000500 <main+0x30c>)
 8000208:	60bb      	str	r3, [r7, #8]
	GPIOx_ODR_t *pPortDOutReg = (GPIOx_ODR_t *) 0x40020C14;
 800020a:	4bbe      	ldr	r3, [pc, #760]	@ (8000504 <main+0x310>)
 800020c:	607b      	str	r3, [r7, #4]

	// 1. Enable GPIOD clock register
	pClkCtrlReg->gpiod_en = 1;
 800020e:	697a      	ldr	r2, [r7, #20]
 8000210:	7813      	ldrb	r3, [r2, #0]
 8000212:	f043 0308 	orr.w	r3, r3, #8
 8000216:	7013      	strb	r3, [r2, #0]

	// 2. Configure PD0, PD1, PD2, PD3 as output (rows)
	pPortDModeReg->pin_0 = 0;
 8000218:	693a      	ldr	r2, [r7, #16]
 800021a:	7813      	ldrb	r3, [r2, #0]
 800021c:	f36f 0301 	bfc	r3, #0, #2
 8000220:	7013      	strb	r3, [r2, #0]
	pPortDModeReg->pin_1 = 0;
 8000222:	693a      	ldr	r2, [r7, #16]
 8000224:	7813      	ldrb	r3, [r2, #0]
 8000226:	f36f 0383 	bfc	r3, #2, #2
 800022a:	7013      	strb	r3, [r2, #0]
	pPortDModeReg->pin_2 = 0;
 800022c:	693a      	ldr	r2, [r7, #16]
 800022e:	7813      	ldrb	r3, [r2, #0]
 8000230:	f36f 1305 	bfc	r3, #4, #2
 8000234:	7013      	strb	r3, [r2, #0]
	pPortDModeReg->pin_3 = 0;
 8000236:	693a      	ldr	r2, [r7, #16]
 8000238:	7813      	ldrb	r3, [r2, #0]
 800023a:	f36f 1387 	bfc	r3, #6, #2
 800023e:	7013      	strb	r3, [r2, #0]

	pPortDModeReg->pin_0 = 0x01;
 8000240:	693a      	ldr	r2, [r7, #16]
 8000242:	7813      	ldrb	r3, [r2, #0]
 8000244:	2101      	movs	r1, #1
 8000246:	f361 0301 	bfi	r3, r1, #0, #2
 800024a:	7013      	strb	r3, [r2, #0]
	pPortDModeReg->pin_1 = 0x01;
 800024c:	693a      	ldr	r2, [r7, #16]
 800024e:	7813      	ldrb	r3, [r2, #0]
 8000250:	2101      	movs	r1, #1
 8000252:	f361 0383 	bfi	r3, r1, #2, #2
 8000256:	7013      	strb	r3, [r2, #0]
	pPortDModeReg->pin_2 = 0x01;
 8000258:	693a      	ldr	r2, [r7, #16]
 800025a:	7813      	ldrb	r3, [r2, #0]
 800025c:	2101      	movs	r1, #1
 800025e:	f361 1305 	bfi	r3, r1, #4, #2
 8000262:	7013      	strb	r3, [r2, #0]
	pPortDModeReg->pin_3 = 0x01;
 8000264:	693a      	ldr	r2, [r7, #16]
 8000266:	7813      	ldrb	r3, [r2, #0]
 8000268:	2101      	movs	r1, #1
 800026a:	f361 1387 	bfi	r3, r1, #6, #2
 800026e:	7013      	strb	r3, [r2, #0]

	// 3. Configure PD8, PD9, PD10, PD11 as input (cols)
	pPortDModeReg->pin_8 = 0;
 8000270:	693a      	ldr	r2, [r7, #16]
 8000272:	7893      	ldrb	r3, [r2, #2]
 8000274:	f36f 0301 	bfc	r3, #0, #2
 8000278:	7093      	strb	r3, [r2, #2]
	pPortDModeReg->pin_9 = 0;
 800027a:	693a      	ldr	r2, [r7, #16]
 800027c:	7893      	ldrb	r3, [r2, #2]
 800027e:	f36f 0383 	bfc	r3, #2, #2
 8000282:	7093      	strb	r3, [r2, #2]
	pPortDModeReg->pin_10 = 0;
 8000284:	693a      	ldr	r2, [r7, #16]
 8000286:	7893      	ldrb	r3, [r2, #2]
 8000288:	f36f 1305 	bfc	r3, #4, #2
 800028c:	7093      	strb	r3, [r2, #2]
	pPortDModeReg->pin_11 = 0;
 800028e:	693a      	ldr	r2, [r7, #16]
 8000290:	7893      	ldrb	r3, [r2, #2]
 8000292:	f36f 1387 	bfc	r3, #6, #2
 8000296:	7093      	strb	r3, [r2, #2]

	// 4. Enable internal pull-up registers for PD8, PD9, PD10, PD11
	pPortDPUPDReg->pin_8 = 0;
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	7893      	ldrb	r3, [r2, #2]
 800029c:	f36f 0301 	bfc	r3, #0, #2
 80002a0:	7093      	strb	r3, [r2, #2]
	pPortDPUPDReg->pin_9 = 0;
 80002a2:	68fa      	ldr	r2, [r7, #12]
 80002a4:	7893      	ldrb	r3, [r2, #2]
 80002a6:	f36f 0383 	bfc	r3, #2, #2
 80002aa:	7093      	strb	r3, [r2, #2]
	pPortDPUPDReg->pin_10 = 0;
 80002ac:	68fa      	ldr	r2, [r7, #12]
 80002ae:	7893      	ldrb	r3, [r2, #2]
 80002b0:	f36f 1305 	bfc	r3, #4, #2
 80002b4:	7093      	strb	r3, [r2, #2]
	pPortDPUPDReg->pin_11 = 0;
 80002b6:	68fa      	ldr	r2, [r7, #12]
 80002b8:	7893      	ldrb	r3, [r2, #2]
 80002ba:	f36f 1387 	bfc	r3, #6, #2
 80002be:	7093      	strb	r3, [r2, #2]

	pPortDPUPDReg->pin_8 = 0x01;
 80002c0:	68fa      	ldr	r2, [r7, #12]
 80002c2:	7893      	ldrb	r3, [r2, #2]
 80002c4:	2101      	movs	r1, #1
 80002c6:	f361 0301 	bfi	r3, r1, #0, #2
 80002ca:	7093      	strb	r3, [r2, #2]
	pPortDPUPDReg->pin_9 = 0x01;
 80002cc:	68fa      	ldr	r2, [r7, #12]
 80002ce:	7893      	ldrb	r3, [r2, #2]
 80002d0:	2101      	movs	r1, #1
 80002d2:	f361 0383 	bfi	r3, r1, #2, #2
 80002d6:	7093      	strb	r3, [r2, #2]
	pPortDPUPDReg->pin_10 = 0x01;
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	7893      	ldrb	r3, [r2, #2]
 80002dc:	2101      	movs	r1, #1
 80002de:	f361 1305 	bfi	r3, r1, #4, #2
 80002e2:	7093      	strb	r3, [r2, #2]
	pPortDPUPDReg->pin_11 = 0x01;
 80002e4:	68fa      	ldr	r2, [r7, #12]
 80002e6:	7893      	ldrb	r3, [r2, #2]
 80002e8:	2101      	movs	r1, #1
 80002ea:	f361 1387 	bfi	r3, r1, #6, #2
 80002ee:	7093      	strb	r3, [r2, #2]

	while(1){
		// 5. Make all rows high
		pPortDOutReg->pin_0 = 1;
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	7813      	ldrb	r3, [r2, #0]
 80002f4:	f043 0301 	orr.w	r3, r3, #1
 80002f8:	7013      	strb	r3, [r2, #0]
		pPortDOutReg->pin_1 = 1;
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	7813      	ldrb	r3, [r2, #0]
 80002fe:	f043 0302 	orr.w	r3, r3, #2
 8000302:	7013      	strb	r3, [r2, #0]
		pPortDOutReg->pin_2 = 1;
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	7813      	ldrb	r3, [r2, #0]
 8000308:	f043 0304 	orr.w	r3, r3, #4
 800030c:	7013      	strb	r3, [r2, #0]
		pPortDOutReg->pin_3 = 1;
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	7813      	ldrb	r3, [r2, #0]
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	7013      	strb	r3, [r2, #0]

		// 6. Make R1 low
		pPortDOutReg->pin_0 = 0;
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	7813      	ldrb	r3, [r2, #0]
 800031c:	f36f 0300 	bfc	r3, #0, #1
 8000320:	7013      	strb	r3, [r2, #0]

		// Scan the columns
		// Check C1 (PD8) low or high
		if(!(pPortDInReg->pin_8 == 1)){
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	785b      	ldrb	r3, [r3, #1]
 8000326:	f003 0301 	and.w	r3, r3, #1
 800032a:	b2db      	uxtb	r3, r3
 800032c:	2b00      	cmp	r3, #0
 800032e:	d104      	bne.n	800033a <main+0x146>
			delay();
 8000330:	f7ff ff4a 	bl	80001c8 <delay>
			printf("1\n");
 8000334:	4874      	ldr	r0, [pc, #464]	@ (8000508 <main+0x314>)
 8000336:	f000 fb3b 	bl	80009b0 <puts>
		}

		// Check C2 (PD9) low or high
		if(!(pPortDInReg->pin_9 == 1)){
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	785b      	ldrb	r3, [r3, #1]
 800033e:	f003 0302 	and.w	r3, r3, #2
 8000342:	b2db      	uxtb	r3, r3
 8000344:	2b00      	cmp	r3, #0
 8000346:	d104      	bne.n	8000352 <main+0x15e>
			delay();
 8000348:	f7ff ff3e 	bl	80001c8 <delay>
			printf("2\n");
 800034c:	486f      	ldr	r0, [pc, #444]	@ (800050c <main+0x318>)
 800034e:	f000 fb2f 	bl	80009b0 <puts>
		}

		// Check C3 (PD10) low or high
		if(!(pPortDInReg->pin_10 == 1)){
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	785b      	ldrb	r3, [r3, #1]
 8000356:	f003 0304 	and.w	r3, r3, #4
 800035a:	b2db      	uxtb	r3, r3
 800035c:	2b00      	cmp	r3, #0
 800035e:	d104      	bne.n	800036a <main+0x176>
			delay();
 8000360:	f7ff ff32 	bl	80001c8 <delay>
			printf("3\n");
 8000364:	486a      	ldr	r0, [pc, #424]	@ (8000510 <main+0x31c>)
 8000366:	f000 fb23 	bl	80009b0 <puts>
		}

		// Check C4 (PD11) low or high
		if(!(pPortDInReg->pin_11 == 1)){
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	785b      	ldrb	r3, [r3, #1]
 800036e:	f003 0308 	and.w	r3, r3, #8
 8000372:	b2db      	uxtb	r3, r3
 8000374:	2b00      	cmp	r3, #0
 8000376:	d104      	bne.n	8000382 <main+0x18e>
			delay();
 8000378:	f7ff ff26 	bl	80001c8 <delay>
			printf("A\n");
 800037c:	4865      	ldr	r0, [pc, #404]	@ (8000514 <main+0x320>)
 800037e:	f000 fb17 	bl	80009b0 <puts>
		}

		// 5. Make all rows high
		pPortDOutReg->pin_0 = 1;
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	7813      	ldrb	r3, [r2, #0]
 8000386:	f043 0301 	orr.w	r3, r3, #1
 800038a:	7013      	strb	r3, [r2, #0]
		pPortDOutReg->pin_1 = 1;
 800038c:	687a      	ldr	r2, [r7, #4]
 800038e:	7813      	ldrb	r3, [r2, #0]
 8000390:	f043 0302 	orr.w	r3, r3, #2
 8000394:	7013      	strb	r3, [r2, #0]
		pPortDOutReg->pin_2 = 1;
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	7813      	ldrb	r3, [r2, #0]
 800039a:	f043 0304 	orr.w	r3, r3, #4
 800039e:	7013      	strb	r3, [r2, #0]
		pPortDOutReg->pin_3 = 1;
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	7813      	ldrb	r3, [r2, #0]
 80003a4:	f043 0308 	orr.w	r3, r3, #8
 80003a8:	7013      	strb	r3, [r2, #0]

		// 7. Make R2 low
		pPortDOutReg->pin_1 = 0;
 80003aa:	687a      	ldr	r2, [r7, #4]
 80003ac:	7813      	ldrb	r3, [r2, #0]
 80003ae:	f36f 0341 	bfc	r3, #1, #1
 80003b2:	7013      	strb	r3, [r2, #0]

		// Scan the columns
		// Check C1 (PD8) low or high
		if(!(pPortDInReg->pin_8 == 1)){
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	785b      	ldrb	r3, [r3, #1]
 80003b8:	f003 0301 	and.w	r3, r3, #1
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d104      	bne.n	80003cc <main+0x1d8>
			delay();
 80003c2:	f7ff ff01 	bl	80001c8 <delay>
			printf("4\n");
 80003c6:	4854      	ldr	r0, [pc, #336]	@ (8000518 <main+0x324>)
 80003c8:	f000 faf2 	bl	80009b0 <puts>
		}

		// Check C2 (PD9) low or high
		if(!(pPortDInReg->pin_9 == 1)){
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	785b      	ldrb	r3, [r3, #1]
 80003d0:	f003 0302 	and.w	r3, r3, #2
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d104      	bne.n	80003e4 <main+0x1f0>
			delay();
 80003da:	f7ff fef5 	bl	80001c8 <delay>
			printf("5\n");
 80003de:	484f      	ldr	r0, [pc, #316]	@ (800051c <main+0x328>)
 80003e0:	f000 fae6 	bl	80009b0 <puts>
		}

		// Check C3 (PD10) low or high
		if(!(pPortDInReg->pin_10 == 1)){
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	785b      	ldrb	r3, [r3, #1]
 80003e8:	f003 0304 	and.w	r3, r3, #4
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d104      	bne.n	80003fc <main+0x208>
			delay();
 80003f2:	f7ff fee9 	bl	80001c8 <delay>
			printf("6\n");
 80003f6:	484a      	ldr	r0, [pc, #296]	@ (8000520 <main+0x32c>)
 80003f8:	f000 fada 	bl	80009b0 <puts>
		}

		// Check C4 (PD11) low or high
		if(!(pPortDInReg->pin_11 == 1)){
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	785b      	ldrb	r3, [r3, #1]
 8000400:	f003 0308 	and.w	r3, r3, #8
 8000404:	b2db      	uxtb	r3, r3
 8000406:	2b00      	cmp	r3, #0
 8000408:	d104      	bne.n	8000414 <main+0x220>
			delay();
 800040a:	f7ff fedd 	bl	80001c8 <delay>
			printf("B\n");
 800040e:	4845      	ldr	r0, [pc, #276]	@ (8000524 <main+0x330>)
 8000410:	f000 face 	bl	80009b0 <puts>
		}

		// 5. Make all rows high
		pPortDOutReg->pin_0 = 1;
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	7813      	ldrb	r3, [r2, #0]
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	7013      	strb	r3, [r2, #0]
		pPortDOutReg->pin_1 = 1;
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	7813      	ldrb	r3, [r2, #0]
 8000422:	f043 0302 	orr.w	r3, r3, #2
 8000426:	7013      	strb	r3, [r2, #0]
		pPortDOutReg->pin_2 = 1;
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	7813      	ldrb	r3, [r2, #0]
 800042c:	f043 0304 	orr.w	r3, r3, #4
 8000430:	7013      	strb	r3, [r2, #0]
		pPortDOutReg->pin_3 = 1;
 8000432:	687a      	ldr	r2, [r7, #4]
 8000434:	7813      	ldrb	r3, [r2, #0]
 8000436:	f043 0308 	orr.w	r3, r3, #8
 800043a:	7013      	strb	r3, [r2, #0]

		// 8. Make R3 low
		pPortDOutReg->pin_2 = 0;
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	7813      	ldrb	r3, [r2, #0]
 8000440:	f36f 0382 	bfc	r3, #2, #1
 8000444:	7013      	strb	r3, [r2, #0]

		// Scan the columns
		// Check C1 (PD8) low or high
		if(!(pPortDInReg->pin_8 == 1)){
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	785b      	ldrb	r3, [r3, #1]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	b2db      	uxtb	r3, r3
 8000450:	2b00      	cmp	r3, #0
 8000452:	d104      	bne.n	800045e <main+0x26a>
			delay();
 8000454:	f7ff feb8 	bl	80001c8 <delay>
			printf("7\n");
 8000458:	4833      	ldr	r0, [pc, #204]	@ (8000528 <main+0x334>)
 800045a:	f000 faa9 	bl	80009b0 <puts>
		}

		// Check C2 (PD9) low or high
		if(!(pPortDInReg->pin_9 == 1)){
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	785b      	ldrb	r3, [r3, #1]
 8000462:	f003 0302 	and.w	r3, r3, #2
 8000466:	b2db      	uxtb	r3, r3
 8000468:	2b00      	cmp	r3, #0
 800046a:	d104      	bne.n	8000476 <main+0x282>
			delay();
 800046c:	f7ff feac 	bl	80001c8 <delay>
			printf("8\n");
 8000470:	482e      	ldr	r0, [pc, #184]	@ (800052c <main+0x338>)
 8000472:	f000 fa9d 	bl	80009b0 <puts>
		}

		// Check C3 (PD10) low or high
		if(!(pPortDInReg->pin_10 == 1)){
 8000476:	68bb      	ldr	r3, [r7, #8]
 8000478:	785b      	ldrb	r3, [r3, #1]
 800047a:	f003 0304 	and.w	r3, r3, #4
 800047e:	b2db      	uxtb	r3, r3
 8000480:	2b00      	cmp	r3, #0
 8000482:	d104      	bne.n	800048e <main+0x29a>
			delay();
 8000484:	f7ff fea0 	bl	80001c8 <delay>
			printf("9\n");
 8000488:	4829      	ldr	r0, [pc, #164]	@ (8000530 <main+0x33c>)
 800048a:	f000 fa91 	bl	80009b0 <puts>
		}

		// Check C4 (PD11) low or high
		if(!(pPortDInReg->pin_11 == 1)){
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	785b      	ldrb	r3, [r3, #1]
 8000492:	f003 0308 	and.w	r3, r3, #8
 8000496:	b2db      	uxtb	r3, r3
 8000498:	2b00      	cmp	r3, #0
 800049a:	d104      	bne.n	80004a6 <main+0x2b2>
			delay();
 800049c:	f7ff fe94 	bl	80001c8 <delay>
			printf("C\n");
 80004a0:	4824      	ldr	r0, [pc, #144]	@ (8000534 <main+0x340>)
 80004a2:	f000 fa85 	bl	80009b0 <puts>
		}

		// 5. Make all rows high
		pPortDOutReg->pin_0 = 1;
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	7813      	ldrb	r3, [r2, #0]
 80004aa:	f043 0301 	orr.w	r3, r3, #1
 80004ae:	7013      	strb	r3, [r2, #0]
		pPortDOutReg->pin_1 = 1;
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	7813      	ldrb	r3, [r2, #0]
 80004b4:	f043 0302 	orr.w	r3, r3, #2
 80004b8:	7013      	strb	r3, [r2, #0]
		pPortDOutReg->pin_2 = 1;
 80004ba:	687a      	ldr	r2, [r7, #4]
 80004bc:	7813      	ldrb	r3, [r2, #0]
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	7013      	strb	r3, [r2, #0]
		pPortDOutReg->pin_3 = 1;
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	7813      	ldrb	r3, [r2, #0]
 80004c8:	f043 0308 	orr.w	r3, r3, #8
 80004cc:	7013      	strb	r3, [r2, #0]

		// 8. Make R4 low
		pPortDOutReg->pin_3 = 0;
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	7813      	ldrb	r3, [r2, #0]
 80004d2:	f36f 03c3 	bfc	r3, #3, #1
 80004d6:	7013      	strb	r3, [r2, #0]

		// Scan the columns
		// Check C1 (PD8) low or high
		if(!(pPortDInReg->pin_8 == 1)){
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	785b      	ldrb	r3, [r3, #1]
 80004dc:	f003 0301 	and.w	r3, r3, #1
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d12a      	bne.n	800053c <main+0x348>
			delay();
 80004e6:	f7ff fe6f 	bl	80001c8 <delay>
			printf("*\n");
 80004ea:	4813      	ldr	r0, [pc, #76]	@ (8000538 <main+0x344>)
 80004ec:	f000 fa60 	bl	80009b0 <puts>
 80004f0:	e024      	b.n	800053c <main+0x348>
 80004f2:	bf00      	nop
 80004f4:	40023830 	.word	0x40023830
 80004f8:	40020c00 	.word	0x40020c00
 80004fc:	40020c0c 	.word	0x40020c0c
 8000500:	40020c10 	.word	0x40020c10
 8000504:	40020c14 	.word	0x40020c14
 8000508:	080010f0 	.word	0x080010f0
 800050c:	080010f4 	.word	0x080010f4
 8000510:	080010f8 	.word	0x080010f8
 8000514:	080010fc 	.word	0x080010fc
 8000518:	08001100 	.word	0x08001100
 800051c:	08001104 	.word	0x08001104
 8000520:	08001108 	.word	0x08001108
 8000524:	0800110c 	.word	0x0800110c
 8000528:	08001110 	.word	0x08001110
 800052c:	08001114 	.word	0x08001114
 8000530:	08001118 	.word	0x08001118
 8000534:	0800111c 	.word	0x0800111c
 8000538:	08001120 	.word	0x08001120
		}

		// Check C2 (PD9) low or high
		if(!(pPortDInReg->pin_9 == 1)){
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	785b      	ldrb	r3, [r3, #1]
 8000540:	f003 0302 	and.w	r3, r3, #2
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2b00      	cmp	r3, #0
 8000548:	d104      	bne.n	8000554 <main+0x360>
			delay();
 800054a:	f7ff fe3d 	bl	80001c8 <delay>
			printf("0\n");
 800054e:	480e      	ldr	r0, [pc, #56]	@ (8000588 <main+0x394>)
 8000550:	f000 fa2e 	bl	80009b0 <puts>
		}

		// Check C3 (PD10) low or high
		if(!(pPortDInReg->pin_10 == 1)){
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	785b      	ldrb	r3, [r3, #1]
 8000558:	f003 0304 	and.w	r3, r3, #4
 800055c:	b2db      	uxtb	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d104      	bne.n	800056c <main+0x378>
			delay();
 8000562:	f7ff fe31 	bl	80001c8 <delay>
			printf("#\n");
 8000566:	4809      	ldr	r0, [pc, #36]	@ (800058c <main+0x398>)
 8000568:	f000 fa22 	bl	80009b0 <puts>
		}

		// Check C4 (PD11) low or high
		if(!(pPortDInReg->pin_11 == 1)){
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	785b      	ldrb	r3, [r3, #1]
 8000570:	f003 0308 	and.w	r3, r3, #8
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	f47f aeba 	bne.w	80002f0 <main+0xfc>
			delay();
 800057c:	f7ff fe24 	bl	80001c8 <delay>
			printf("D\n");
 8000580:	4803      	ldr	r0, [pc, #12]	@ (8000590 <main+0x39c>)
 8000582:	f000 fa15 	bl	80009b0 <puts>
		pPortDOutReg->pin_0 = 1;
 8000586:	e6b3      	b.n	80002f0 <main+0xfc>
 8000588:	08001124 	.word	0x08001124
 800058c:	08001128 	.word	0x08001128
 8000590:	0800112c 	.word	0x0800112c

08000594 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800059e:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <ITM_SendChar+0x48>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a0e      	ldr	r2, [pc, #56]	@ (80005dc <ITM_SendChar+0x48>)
 80005a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005a8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80005aa:	4b0d      	ldr	r3, [pc, #52]	@ (80005e0 <ITM_SendChar+0x4c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a0c      	ldr	r2, [pc, #48]	@ (80005e0 <ITM_SendChar+0x4c>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80005b6:	bf00      	nop
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f8      	beq.n	80005b8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80005c6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	6013      	str	r3, [r2, #0]
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000edfc 	.word	0xe000edfc
 80005e0:	e0000e00 	.word	0xe0000e00

080005e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
 80005f4:	e00a      	b.n	800060c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005f6:	f3af 8000 	nop.w
 80005fa:	4601      	mov	r1, r0
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	1c5a      	adds	r2, r3, #1
 8000600:	60ba      	str	r2, [r7, #8]
 8000602:	b2ca      	uxtb	r2, r1
 8000604:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	3301      	adds	r3, #1
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	429a      	cmp	r2, r3
 8000612:	dbf0      	blt.n	80005f6 <_read+0x12>
  }

  return len;
 8000614:	687b      	ldr	r3, [r7, #4]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b086      	sub	sp, #24
 8000622:	af00      	add	r7, sp, #0
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	60b9      	str	r1, [r7, #8]
 8000628:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	e009      	b.n	8000644 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	1c5a      	adds	r2, r3, #1
 8000634:	60ba      	str	r2, [r7, #8]
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ffab 	bl	8000594 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	3301      	adds	r3, #1
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	697a      	ldr	r2, [r7, #20]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	429a      	cmp	r2, r3
 800064a:	dbf1      	blt.n	8000630 <_write+0x12>
  }
  return len;
 800064c:	687b      	ldr	r3, [r7, #4]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <_close>:

int _close(int file)
{
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800065e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000662:	4618      	mov	r0, r3
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800067e:	605a      	str	r2, [r3, #4]
  return 0;
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <_isatty>:

int _isatty(int file)
{
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000696:	2301      	movs	r3, #1
}
 8000698:	4618      	mov	r0, r3
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006c8:	4a14      	ldr	r2, [pc, #80]	@ (800071c <_sbrk+0x5c>)
 80006ca:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <_sbrk+0x60>)
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006d4:	4b13      	ldr	r3, [pc, #76]	@ (8000724 <_sbrk+0x64>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d102      	bne.n	80006e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006dc:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <_sbrk+0x64>)
 80006de:	4a12      	ldr	r2, [pc, #72]	@ (8000728 <_sbrk+0x68>)
 80006e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006e2:	4b10      	ldr	r3, [pc, #64]	@ (8000724 <_sbrk+0x64>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	693a      	ldr	r2, [r7, #16]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d207      	bcs.n	8000700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006f0:	f000 fa8c 	bl	8000c0c <__errno>
 80006f4:	4603      	mov	r3, r0
 80006f6:	220c      	movs	r2, #12
 80006f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006fe:	e009      	b.n	8000714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000700:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <_sbrk+0x64>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000706:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <_sbrk+0x64>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	4a05      	ldr	r2, [pc, #20]	@ (8000724 <_sbrk+0x64>)
 8000710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000712:	68fb      	ldr	r3, [r7, #12]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20020000 	.word	0x20020000
 8000720:	00000400 	.word	0x00000400
 8000724:	20000078 	.word	0x20000078
 8000728:	200001c8 	.word	0x200001c8

0800072c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800072c:	480d      	ldr	r0, [pc, #52]	@ (8000764 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800072e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000730:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000734:	480c      	ldr	r0, [pc, #48]	@ (8000768 <LoopForever+0x6>)
  ldr r1, =_edata
 8000736:	490d      	ldr	r1, [pc, #52]	@ (800076c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000738:	4a0d      	ldr	r2, [pc, #52]	@ (8000770 <LoopForever+0xe>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800073c:	e002      	b.n	8000744 <LoopCopyDataInit>

0800073e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000742:	3304      	adds	r3, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000748:	d3f9      	bcc.n	800073e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074a:	4a0a      	ldr	r2, [pc, #40]	@ (8000774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800074c:	4c0a      	ldr	r4, [pc, #40]	@ (8000778 <LoopForever+0x16>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000750:	e001      	b.n	8000756 <LoopFillZerobss>

08000752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000754:	3204      	adds	r2, #4

08000756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000758:	d3fb      	bcc.n	8000752 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800075a:	f000 fa5d 	bl	8000c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800075e:	f7ff fd49 	bl	80001f4 <main>

08000762 <LoopForever>:

LoopForever:
  b LoopForever
 8000762:	e7fe      	b.n	8000762 <LoopForever>
  ldr   r0, =_estack
 8000764:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800076c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000770:	08001138 	.word	0x08001138
  ldr r2, =_sbss
 8000774:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000778:	200001c8 	.word	0x200001c8

0800077c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800077c:	e7fe      	b.n	800077c <ADC_IRQHandler>
	...

08000780 <std>:
 8000780:	2300      	movs	r3, #0
 8000782:	b510      	push	{r4, lr}
 8000784:	4604      	mov	r4, r0
 8000786:	e9c0 3300 	strd	r3, r3, [r0]
 800078a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800078e:	6083      	str	r3, [r0, #8]
 8000790:	8181      	strh	r1, [r0, #12]
 8000792:	6643      	str	r3, [r0, #100]	@ 0x64
 8000794:	81c2      	strh	r2, [r0, #14]
 8000796:	6183      	str	r3, [r0, #24]
 8000798:	4619      	mov	r1, r3
 800079a:	2208      	movs	r2, #8
 800079c:	305c      	adds	r0, #92	@ 0x5c
 800079e:	f000 f9e7 	bl	8000b70 <memset>
 80007a2:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <std+0x58>)
 80007a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80007a6:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <std+0x5c>)
 80007a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80007aa:	4b0d      	ldr	r3, [pc, #52]	@ (80007e0 <std+0x60>)
 80007ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80007ae:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <std+0x64>)
 80007b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80007b2:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <std+0x68>)
 80007b4:	6224      	str	r4, [r4, #32]
 80007b6:	429c      	cmp	r4, r3
 80007b8:	d006      	beq.n	80007c8 <std+0x48>
 80007ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80007be:	4294      	cmp	r4, r2
 80007c0:	d002      	beq.n	80007c8 <std+0x48>
 80007c2:	33d0      	adds	r3, #208	@ 0xd0
 80007c4:	429c      	cmp	r4, r3
 80007c6:	d105      	bne.n	80007d4 <std+0x54>
 80007c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80007cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007d0:	f000 ba46 	b.w	8000c60 <__retarget_lock_init_recursive>
 80007d4:	bd10      	pop	{r4, pc}
 80007d6:	bf00      	nop
 80007d8:	080009c1 	.word	0x080009c1
 80007dc:	080009e3 	.word	0x080009e3
 80007e0:	08000a1b 	.word	0x08000a1b
 80007e4:	08000a3f 	.word	0x08000a3f
 80007e8:	2000007c 	.word	0x2000007c

080007ec <stdio_exit_handler>:
 80007ec:	4a02      	ldr	r2, [pc, #8]	@ (80007f8 <stdio_exit_handler+0xc>)
 80007ee:	4903      	ldr	r1, [pc, #12]	@ (80007fc <stdio_exit_handler+0x10>)
 80007f0:	4803      	ldr	r0, [pc, #12]	@ (8000800 <stdio_exit_handler+0x14>)
 80007f2:	f000 b869 	b.w	80008c8 <_fwalk_sglue>
 80007f6:	bf00      	nop
 80007f8:	20000000 	.word	0x20000000
 80007fc:	08000f61 	.word	0x08000f61
 8000800:	20000010 	.word	0x20000010

08000804 <cleanup_stdio>:
 8000804:	6841      	ldr	r1, [r0, #4]
 8000806:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <cleanup_stdio+0x34>)
 8000808:	4299      	cmp	r1, r3
 800080a:	b510      	push	{r4, lr}
 800080c:	4604      	mov	r4, r0
 800080e:	d001      	beq.n	8000814 <cleanup_stdio+0x10>
 8000810:	f000 fba6 	bl	8000f60 <_fflush_r>
 8000814:	68a1      	ldr	r1, [r4, #8]
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <cleanup_stdio+0x38>)
 8000818:	4299      	cmp	r1, r3
 800081a:	d002      	beq.n	8000822 <cleanup_stdio+0x1e>
 800081c:	4620      	mov	r0, r4
 800081e:	f000 fb9f 	bl	8000f60 <_fflush_r>
 8000822:	68e1      	ldr	r1, [r4, #12]
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <cleanup_stdio+0x3c>)
 8000826:	4299      	cmp	r1, r3
 8000828:	d004      	beq.n	8000834 <cleanup_stdio+0x30>
 800082a:	4620      	mov	r0, r4
 800082c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000830:	f000 bb96 	b.w	8000f60 <_fflush_r>
 8000834:	bd10      	pop	{r4, pc}
 8000836:	bf00      	nop
 8000838:	2000007c 	.word	0x2000007c
 800083c:	200000e4 	.word	0x200000e4
 8000840:	2000014c 	.word	0x2000014c

08000844 <global_stdio_init.part.0>:
 8000844:	b510      	push	{r4, lr}
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <global_stdio_init.part.0+0x30>)
 8000848:	4c0b      	ldr	r4, [pc, #44]	@ (8000878 <global_stdio_init.part.0+0x34>)
 800084a:	4a0c      	ldr	r2, [pc, #48]	@ (800087c <global_stdio_init.part.0+0x38>)
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	4620      	mov	r0, r4
 8000850:	2200      	movs	r2, #0
 8000852:	2104      	movs	r1, #4
 8000854:	f7ff ff94 	bl	8000780 <std>
 8000858:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800085c:	2201      	movs	r2, #1
 800085e:	2109      	movs	r1, #9
 8000860:	f7ff ff8e 	bl	8000780 <std>
 8000864:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000868:	2202      	movs	r2, #2
 800086a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800086e:	2112      	movs	r1, #18
 8000870:	f7ff bf86 	b.w	8000780 <std>
 8000874:	200001b4 	.word	0x200001b4
 8000878:	2000007c 	.word	0x2000007c
 800087c:	080007ed 	.word	0x080007ed

08000880 <__sfp_lock_acquire>:
 8000880:	4801      	ldr	r0, [pc, #4]	@ (8000888 <__sfp_lock_acquire+0x8>)
 8000882:	f000 b9ee 	b.w	8000c62 <__retarget_lock_acquire_recursive>
 8000886:	bf00      	nop
 8000888:	200001bd 	.word	0x200001bd

0800088c <__sfp_lock_release>:
 800088c:	4801      	ldr	r0, [pc, #4]	@ (8000894 <__sfp_lock_release+0x8>)
 800088e:	f000 b9e9 	b.w	8000c64 <__retarget_lock_release_recursive>
 8000892:	bf00      	nop
 8000894:	200001bd 	.word	0x200001bd

08000898 <__sinit>:
 8000898:	b510      	push	{r4, lr}
 800089a:	4604      	mov	r4, r0
 800089c:	f7ff fff0 	bl	8000880 <__sfp_lock_acquire>
 80008a0:	6a23      	ldr	r3, [r4, #32]
 80008a2:	b11b      	cbz	r3, 80008ac <__sinit+0x14>
 80008a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008a8:	f7ff bff0 	b.w	800088c <__sfp_lock_release>
 80008ac:	4b04      	ldr	r3, [pc, #16]	@ (80008c0 <__sinit+0x28>)
 80008ae:	6223      	str	r3, [r4, #32]
 80008b0:	4b04      	ldr	r3, [pc, #16]	@ (80008c4 <__sinit+0x2c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d1f5      	bne.n	80008a4 <__sinit+0xc>
 80008b8:	f7ff ffc4 	bl	8000844 <global_stdio_init.part.0>
 80008bc:	e7f2      	b.n	80008a4 <__sinit+0xc>
 80008be:	bf00      	nop
 80008c0:	08000805 	.word	0x08000805
 80008c4:	200001b4 	.word	0x200001b4

080008c8 <_fwalk_sglue>:
 80008c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008cc:	4607      	mov	r7, r0
 80008ce:	4688      	mov	r8, r1
 80008d0:	4614      	mov	r4, r2
 80008d2:	2600      	movs	r6, #0
 80008d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008d8:	f1b9 0901 	subs.w	r9, r9, #1
 80008dc:	d505      	bpl.n	80008ea <_fwalk_sglue+0x22>
 80008de:	6824      	ldr	r4, [r4, #0]
 80008e0:	2c00      	cmp	r4, #0
 80008e2:	d1f7      	bne.n	80008d4 <_fwalk_sglue+0xc>
 80008e4:	4630      	mov	r0, r6
 80008e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008ea:	89ab      	ldrh	r3, [r5, #12]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d907      	bls.n	8000900 <_fwalk_sglue+0x38>
 80008f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008f4:	3301      	adds	r3, #1
 80008f6:	d003      	beq.n	8000900 <_fwalk_sglue+0x38>
 80008f8:	4629      	mov	r1, r5
 80008fa:	4638      	mov	r0, r7
 80008fc:	47c0      	blx	r8
 80008fe:	4306      	orrs	r6, r0
 8000900:	3568      	adds	r5, #104	@ 0x68
 8000902:	e7e9      	b.n	80008d8 <_fwalk_sglue+0x10>

08000904 <_puts_r>:
 8000904:	6a03      	ldr	r3, [r0, #32]
 8000906:	b570      	push	{r4, r5, r6, lr}
 8000908:	6884      	ldr	r4, [r0, #8]
 800090a:	4605      	mov	r5, r0
 800090c:	460e      	mov	r6, r1
 800090e:	b90b      	cbnz	r3, 8000914 <_puts_r+0x10>
 8000910:	f7ff ffc2 	bl	8000898 <__sinit>
 8000914:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000916:	07db      	lsls	r3, r3, #31
 8000918:	d405      	bmi.n	8000926 <_puts_r+0x22>
 800091a:	89a3      	ldrh	r3, [r4, #12]
 800091c:	0598      	lsls	r0, r3, #22
 800091e:	d402      	bmi.n	8000926 <_puts_r+0x22>
 8000920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000922:	f000 f99e 	bl	8000c62 <__retarget_lock_acquire_recursive>
 8000926:	89a3      	ldrh	r3, [r4, #12]
 8000928:	0719      	lsls	r1, r3, #28
 800092a:	d502      	bpl.n	8000932 <_puts_r+0x2e>
 800092c:	6923      	ldr	r3, [r4, #16]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d135      	bne.n	800099e <_puts_r+0x9a>
 8000932:	4621      	mov	r1, r4
 8000934:	4628      	mov	r0, r5
 8000936:	f000 f8c5 	bl	8000ac4 <__swsetup_r>
 800093a:	b380      	cbz	r0, 800099e <_puts_r+0x9a>
 800093c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000940:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000942:	07da      	lsls	r2, r3, #31
 8000944:	d405      	bmi.n	8000952 <_puts_r+0x4e>
 8000946:	89a3      	ldrh	r3, [r4, #12]
 8000948:	059b      	lsls	r3, r3, #22
 800094a:	d402      	bmi.n	8000952 <_puts_r+0x4e>
 800094c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800094e:	f000 f989 	bl	8000c64 <__retarget_lock_release_recursive>
 8000952:	4628      	mov	r0, r5
 8000954:	bd70      	pop	{r4, r5, r6, pc}
 8000956:	2b00      	cmp	r3, #0
 8000958:	da04      	bge.n	8000964 <_puts_r+0x60>
 800095a:	69a2      	ldr	r2, [r4, #24]
 800095c:	429a      	cmp	r2, r3
 800095e:	dc17      	bgt.n	8000990 <_puts_r+0x8c>
 8000960:	290a      	cmp	r1, #10
 8000962:	d015      	beq.n	8000990 <_puts_r+0x8c>
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	1c5a      	adds	r2, r3, #1
 8000968:	6022      	str	r2, [r4, #0]
 800096a:	7019      	strb	r1, [r3, #0]
 800096c:	68a3      	ldr	r3, [r4, #8]
 800096e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000972:	3b01      	subs	r3, #1
 8000974:	60a3      	str	r3, [r4, #8]
 8000976:	2900      	cmp	r1, #0
 8000978:	d1ed      	bne.n	8000956 <_puts_r+0x52>
 800097a:	2b00      	cmp	r3, #0
 800097c:	da11      	bge.n	80009a2 <_puts_r+0x9e>
 800097e:	4622      	mov	r2, r4
 8000980:	210a      	movs	r1, #10
 8000982:	4628      	mov	r0, r5
 8000984:	f000 f85f 	bl	8000a46 <__swbuf_r>
 8000988:	3001      	adds	r0, #1
 800098a:	d0d7      	beq.n	800093c <_puts_r+0x38>
 800098c:	250a      	movs	r5, #10
 800098e:	e7d7      	b.n	8000940 <_puts_r+0x3c>
 8000990:	4622      	mov	r2, r4
 8000992:	4628      	mov	r0, r5
 8000994:	f000 f857 	bl	8000a46 <__swbuf_r>
 8000998:	3001      	adds	r0, #1
 800099a:	d1e7      	bne.n	800096c <_puts_r+0x68>
 800099c:	e7ce      	b.n	800093c <_puts_r+0x38>
 800099e:	3e01      	subs	r6, #1
 80009a0:	e7e4      	b.n	800096c <_puts_r+0x68>
 80009a2:	6823      	ldr	r3, [r4, #0]
 80009a4:	1c5a      	adds	r2, r3, #1
 80009a6:	6022      	str	r2, [r4, #0]
 80009a8:	220a      	movs	r2, #10
 80009aa:	701a      	strb	r2, [r3, #0]
 80009ac:	e7ee      	b.n	800098c <_puts_r+0x88>
	...

080009b0 <puts>:
 80009b0:	4b02      	ldr	r3, [pc, #8]	@ (80009bc <puts+0xc>)
 80009b2:	4601      	mov	r1, r0
 80009b4:	6818      	ldr	r0, [r3, #0]
 80009b6:	f7ff bfa5 	b.w	8000904 <_puts_r>
 80009ba:	bf00      	nop
 80009bc:	2000000c 	.word	0x2000000c

080009c0 <__sread>:
 80009c0:	b510      	push	{r4, lr}
 80009c2:	460c      	mov	r4, r1
 80009c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009c8:	f000 f8fc 	bl	8000bc4 <_read_r>
 80009cc:	2800      	cmp	r0, #0
 80009ce:	bfab      	itete	ge
 80009d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80009d2:	89a3      	ldrhlt	r3, [r4, #12]
 80009d4:	181b      	addge	r3, r3, r0
 80009d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80009da:	bfac      	ite	ge
 80009dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80009de:	81a3      	strhlt	r3, [r4, #12]
 80009e0:	bd10      	pop	{r4, pc}

080009e2 <__swrite>:
 80009e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009e6:	461f      	mov	r7, r3
 80009e8:	898b      	ldrh	r3, [r1, #12]
 80009ea:	05db      	lsls	r3, r3, #23
 80009ec:	4605      	mov	r5, r0
 80009ee:	460c      	mov	r4, r1
 80009f0:	4616      	mov	r6, r2
 80009f2:	d505      	bpl.n	8000a00 <__swrite+0x1e>
 80009f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009f8:	2302      	movs	r3, #2
 80009fa:	2200      	movs	r2, #0
 80009fc:	f000 f8d0 	bl	8000ba0 <_lseek_r>
 8000a00:	89a3      	ldrh	r3, [r4, #12]
 8000a02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a0a:	81a3      	strh	r3, [r4, #12]
 8000a0c:	4632      	mov	r2, r6
 8000a0e:	463b      	mov	r3, r7
 8000a10:	4628      	mov	r0, r5
 8000a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000a16:	f000 b8e7 	b.w	8000be8 <_write_r>

08000a1a <__sseek>:
 8000a1a:	b510      	push	{r4, lr}
 8000a1c:	460c      	mov	r4, r1
 8000a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a22:	f000 f8bd 	bl	8000ba0 <_lseek_r>
 8000a26:	1c43      	adds	r3, r0, #1
 8000a28:	89a3      	ldrh	r3, [r4, #12]
 8000a2a:	bf15      	itete	ne
 8000a2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000a2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000a32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000a36:	81a3      	strheq	r3, [r4, #12]
 8000a38:	bf18      	it	ne
 8000a3a:	81a3      	strhne	r3, [r4, #12]
 8000a3c:	bd10      	pop	{r4, pc}

08000a3e <__sclose>:
 8000a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a42:	f000 b89d 	b.w	8000b80 <_close_r>

08000a46 <__swbuf_r>:
 8000a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a48:	460e      	mov	r6, r1
 8000a4a:	4614      	mov	r4, r2
 8000a4c:	4605      	mov	r5, r0
 8000a4e:	b118      	cbz	r0, 8000a58 <__swbuf_r+0x12>
 8000a50:	6a03      	ldr	r3, [r0, #32]
 8000a52:	b90b      	cbnz	r3, 8000a58 <__swbuf_r+0x12>
 8000a54:	f7ff ff20 	bl	8000898 <__sinit>
 8000a58:	69a3      	ldr	r3, [r4, #24]
 8000a5a:	60a3      	str	r3, [r4, #8]
 8000a5c:	89a3      	ldrh	r3, [r4, #12]
 8000a5e:	071a      	lsls	r2, r3, #28
 8000a60:	d501      	bpl.n	8000a66 <__swbuf_r+0x20>
 8000a62:	6923      	ldr	r3, [r4, #16]
 8000a64:	b943      	cbnz	r3, 8000a78 <__swbuf_r+0x32>
 8000a66:	4621      	mov	r1, r4
 8000a68:	4628      	mov	r0, r5
 8000a6a:	f000 f82b 	bl	8000ac4 <__swsetup_r>
 8000a6e:	b118      	cbz	r0, 8000a78 <__swbuf_r+0x32>
 8000a70:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000a74:	4638      	mov	r0, r7
 8000a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a78:	6823      	ldr	r3, [r4, #0]
 8000a7a:	6922      	ldr	r2, [r4, #16]
 8000a7c:	1a98      	subs	r0, r3, r2
 8000a7e:	6963      	ldr	r3, [r4, #20]
 8000a80:	b2f6      	uxtb	r6, r6
 8000a82:	4283      	cmp	r3, r0
 8000a84:	4637      	mov	r7, r6
 8000a86:	dc05      	bgt.n	8000a94 <__swbuf_r+0x4e>
 8000a88:	4621      	mov	r1, r4
 8000a8a:	4628      	mov	r0, r5
 8000a8c:	f000 fa68 	bl	8000f60 <_fflush_r>
 8000a90:	2800      	cmp	r0, #0
 8000a92:	d1ed      	bne.n	8000a70 <__swbuf_r+0x2a>
 8000a94:	68a3      	ldr	r3, [r4, #8]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	60a3      	str	r3, [r4, #8]
 8000a9a:	6823      	ldr	r3, [r4, #0]
 8000a9c:	1c5a      	adds	r2, r3, #1
 8000a9e:	6022      	str	r2, [r4, #0]
 8000aa0:	701e      	strb	r6, [r3, #0]
 8000aa2:	6962      	ldr	r2, [r4, #20]
 8000aa4:	1c43      	adds	r3, r0, #1
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__swbuf_r+0x6e>
 8000aaa:	89a3      	ldrh	r3, [r4, #12]
 8000aac:	07db      	lsls	r3, r3, #31
 8000aae:	d5e1      	bpl.n	8000a74 <__swbuf_r+0x2e>
 8000ab0:	2e0a      	cmp	r6, #10
 8000ab2:	d1df      	bne.n	8000a74 <__swbuf_r+0x2e>
 8000ab4:	4621      	mov	r1, r4
 8000ab6:	4628      	mov	r0, r5
 8000ab8:	f000 fa52 	bl	8000f60 <_fflush_r>
 8000abc:	2800      	cmp	r0, #0
 8000abe:	d0d9      	beq.n	8000a74 <__swbuf_r+0x2e>
 8000ac0:	e7d6      	b.n	8000a70 <__swbuf_r+0x2a>
	...

08000ac4 <__swsetup_r>:
 8000ac4:	b538      	push	{r3, r4, r5, lr}
 8000ac6:	4b29      	ldr	r3, [pc, #164]	@ (8000b6c <__swsetup_r+0xa8>)
 8000ac8:	4605      	mov	r5, r0
 8000aca:	6818      	ldr	r0, [r3, #0]
 8000acc:	460c      	mov	r4, r1
 8000ace:	b118      	cbz	r0, 8000ad8 <__swsetup_r+0x14>
 8000ad0:	6a03      	ldr	r3, [r0, #32]
 8000ad2:	b90b      	cbnz	r3, 8000ad8 <__swsetup_r+0x14>
 8000ad4:	f7ff fee0 	bl	8000898 <__sinit>
 8000ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000adc:	0719      	lsls	r1, r3, #28
 8000ade:	d422      	bmi.n	8000b26 <__swsetup_r+0x62>
 8000ae0:	06da      	lsls	r2, r3, #27
 8000ae2:	d407      	bmi.n	8000af4 <__swsetup_r+0x30>
 8000ae4:	2209      	movs	r2, #9
 8000ae6:	602a      	str	r2, [r5, #0]
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aec:	81a3      	strh	r3, [r4, #12]
 8000aee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000af2:	e033      	b.n	8000b5c <__swsetup_r+0x98>
 8000af4:	0758      	lsls	r0, r3, #29
 8000af6:	d512      	bpl.n	8000b1e <__swsetup_r+0x5a>
 8000af8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000afa:	b141      	cbz	r1, 8000b0e <__swsetup_r+0x4a>
 8000afc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000b00:	4299      	cmp	r1, r3
 8000b02:	d002      	beq.n	8000b0a <__swsetup_r+0x46>
 8000b04:	4628      	mov	r0, r5
 8000b06:	f000 f8af 	bl	8000c68 <_free_r>
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8000b0e:	89a3      	ldrh	r3, [r4, #12]
 8000b10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000b14:	81a3      	strh	r3, [r4, #12]
 8000b16:	2300      	movs	r3, #0
 8000b18:	6063      	str	r3, [r4, #4]
 8000b1a:	6923      	ldr	r3, [r4, #16]
 8000b1c:	6023      	str	r3, [r4, #0]
 8000b1e:	89a3      	ldrh	r3, [r4, #12]
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	81a3      	strh	r3, [r4, #12]
 8000b26:	6923      	ldr	r3, [r4, #16]
 8000b28:	b94b      	cbnz	r3, 8000b3e <__swsetup_r+0x7a>
 8000b2a:	89a3      	ldrh	r3, [r4, #12]
 8000b2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000b30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b34:	d003      	beq.n	8000b3e <__swsetup_r+0x7a>
 8000b36:	4621      	mov	r1, r4
 8000b38:	4628      	mov	r0, r5
 8000b3a:	f000 fa5f 	bl	8000ffc <__smakebuf_r>
 8000b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b42:	f013 0201 	ands.w	r2, r3, #1
 8000b46:	d00a      	beq.n	8000b5e <__swsetup_r+0x9a>
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60a2      	str	r2, [r4, #8]
 8000b4c:	6962      	ldr	r2, [r4, #20]
 8000b4e:	4252      	negs	r2, r2
 8000b50:	61a2      	str	r2, [r4, #24]
 8000b52:	6922      	ldr	r2, [r4, #16]
 8000b54:	b942      	cbnz	r2, 8000b68 <__swsetup_r+0xa4>
 8000b56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000b5a:	d1c5      	bne.n	8000ae8 <__swsetup_r+0x24>
 8000b5c:	bd38      	pop	{r3, r4, r5, pc}
 8000b5e:	0799      	lsls	r1, r3, #30
 8000b60:	bf58      	it	pl
 8000b62:	6962      	ldrpl	r2, [r4, #20]
 8000b64:	60a2      	str	r2, [r4, #8]
 8000b66:	e7f4      	b.n	8000b52 <__swsetup_r+0x8e>
 8000b68:	2000      	movs	r0, #0
 8000b6a:	e7f7      	b.n	8000b5c <__swsetup_r+0x98>
 8000b6c:	2000000c 	.word	0x2000000c

08000b70 <memset>:
 8000b70:	4402      	add	r2, r0
 8000b72:	4603      	mov	r3, r0
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d100      	bne.n	8000b7a <memset+0xa>
 8000b78:	4770      	bx	lr
 8000b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8000b7e:	e7f9      	b.n	8000b74 <memset+0x4>

08000b80 <_close_r>:
 8000b80:	b538      	push	{r3, r4, r5, lr}
 8000b82:	4d06      	ldr	r5, [pc, #24]	@ (8000b9c <_close_r+0x1c>)
 8000b84:	2300      	movs	r3, #0
 8000b86:	4604      	mov	r4, r0
 8000b88:	4608      	mov	r0, r1
 8000b8a:	602b      	str	r3, [r5, #0]
 8000b8c:	f7ff fd63 	bl	8000656 <_close>
 8000b90:	1c43      	adds	r3, r0, #1
 8000b92:	d102      	bne.n	8000b9a <_close_r+0x1a>
 8000b94:	682b      	ldr	r3, [r5, #0]
 8000b96:	b103      	cbz	r3, 8000b9a <_close_r+0x1a>
 8000b98:	6023      	str	r3, [r4, #0]
 8000b9a:	bd38      	pop	{r3, r4, r5, pc}
 8000b9c:	200001b8 	.word	0x200001b8

08000ba0 <_lseek_r>:
 8000ba0:	b538      	push	{r3, r4, r5, lr}
 8000ba2:	4d07      	ldr	r5, [pc, #28]	@ (8000bc0 <_lseek_r+0x20>)
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	4608      	mov	r0, r1
 8000ba8:	4611      	mov	r1, r2
 8000baa:	2200      	movs	r2, #0
 8000bac:	602a      	str	r2, [r5, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	f7ff fd78 	bl	80006a4 <_lseek>
 8000bb4:	1c43      	adds	r3, r0, #1
 8000bb6:	d102      	bne.n	8000bbe <_lseek_r+0x1e>
 8000bb8:	682b      	ldr	r3, [r5, #0]
 8000bba:	b103      	cbz	r3, 8000bbe <_lseek_r+0x1e>
 8000bbc:	6023      	str	r3, [r4, #0]
 8000bbe:	bd38      	pop	{r3, r4, r5, pc}
 8000bc0:	200001b8 	.word	0x200001b8

08000bc4 <_read_r>:
 8000bc4:	b538      	push	{r3, r4, r5, lr}
 8000bc6:	4d07      	ldr	r5, [pc, #28]	@ (8000be4 <_read_r+0x20>)
 8000bc8:	4604      	mov	r4, r0
 8000bca:	4608      	mov	r0, r1
 8000bcc:	4611      	mov	r1, r2
 8000bce:	2200      	movs	r2, #0
 8000bd0:	602a      	str	r2, [r5, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	f7ff fd06 	bl	80005e4 <_read>
 8000bd8:	1c43      	adds	r3, r0, #1
 8000bda:	d102      	bne.n	8000be2 <_read_r+0x1e>
 8000bdc:	682b      	ldr	r3, [r5, #0]
 8000bde:	b103      	cbz	r3, 8000be2 <_read_r+0x1e>
 8000be0:	6023      	str	r3, [r4, #0]
 8000be2:	bd38      	pop	{r3, r4, r5, pc}
 8000be4:	200001b8 	.word	0x200001b8

08000be8 <_write_r>:
 8000be8:	b538      	push	{r3, r4, r5, lr}
 8000bea:	4d07      	ldr	r5, [pc, #28]	@ (8000c08 <_write_r+0x20>)
 8000bec:	4604      	mov	r4, r0
 8000bee:	4608      	mov	r0, r1
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	602a      	str	r2, [r5, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f7ff fd11 	bl	800061e <_write>
 8000bfc:	1c43      	adds	r3, r0, #1
 8000bfe:	d102      	bne.n	8000c06 <_write_r+0x1e>
 8000c00:	682b      	ldr	r3, [r5, #0]
 8000c02:	b103      	cbz	r3, 8000c06 <_write_r+0x1e>
 8000c04:	6023      	str	r3, [r4, #0]
 8000c06:	bd38      	pop	{r3, r4, r5, pc}
 8000c08:	200001b8 	.word	0x200001b8

08000c0c <__errno>:
 8000c0c:	4b01      	ldr	r3, [pc, #4]	@ (8000c14 <__errno+0x8>)
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	2000000c 	.word	0x2000000c

08000c18 <__libc_init_array>:
 8000c18:	b570      	push	{r4, r5, r6, lr}
 8000c1a:	4d0d      	ldr	r5, [pc, #52]	@ (8000c50 <__libc_init_array+0x38>)
 8000c1c:	4c0d      	ldr	r4, [pc, #52]	@ (8000c54 <__libc_init_array+0x3c>)
 8000c1e:	1b64      	subs	r4, r4, r5
 8000c20:	10a4      	asrs	r4, r4, #2
 8000c22:	2600      	movs	r6, #0
 8000c24:	42a6      	cmp	r6, r4
 8000c26:	d109      	bne.n	8000c3c <__libc_init_array+0x24>
 8000c28:	4d0b      	ldr	r5, [pc, #44]	@ (8000c58 <__libc_init_array+0x40>)
 8000c2a:	4c0c      	ldr	r4, [pc, #48]	@ (8000c5c <__libc_init_array+0x44>)
 8000c2c:	f000 fa54 	bl	80010d8 <_init>
 8000c30:	1b64      	subs	r4, r4, r5
 8000c32:	10a4      	asrs	r4, r4, #2
 8000c34:	2600      	movs	r6, #0
 8000c36:	42a6      	cmp	r6, r4
 8000c38:	d105      	bne.n	8000c46 <__libc_init_array+0x2e>
 8000c3a:	bd70      	pop	{r4, r5, r6, pc}
 8000c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c40:	4798      	blx	r3
 8000c42:	3601      	adds	r6, #1
 8000c44:	e7ee      	b.n	8000c24 <__libc_init_array+0xc>
 8000c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c4a:	4798      	blx	r3
 8000c4c:	3601      	adds	r6, #1
 8000c4e:	e7f2      	b.n	8000c36 <__libc_init_array+0x1e>
 8000c50:	08001130 	.word	0x08001130
 8000c54:	08001130 	.word	0x08001130
 8000c58:	08001130 	.word	0x08001130
 8000c5c:	08001134 	.word	0x08001134

08000c60 <__retarget_lock_init_recursive>:
 8000c60:	4770      	bx	lr

08000c62 <__retarget_lock_acquire_recursive>:
 8000c62:	4770      	bx	lr

08000c64 <__retarget_lock_release_recursive>:
 8000c64:	4770      	bx	lr
	...

08000c68 <_free_r>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	4605      	mov	r5, r0
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	d041      	beq.n	8000cf4 <_free_r+0x8c>
 8000c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c74:	1f0c      	subs	r4, r1, #4
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	bfb8      	it	lt
 8000c7a:	18e4      	addlt	r4, r4, r3
 8000c7c:	f000 f8e0 	bl	8000e40 <__malloc_lock>
 8000c80:	4a1d      	ldr	r2, [pc, #116]	@ (8000cf8 <_free_r+0x90>)
 8000c82:	6813      	ldr	r3, [r2, #0]
 8000c84:	b933      	cbnz	r3, 8000c94 <_free_r+0x2c>
 8000c86:	6063      	str	r3, [r4, #4]
 8000c88:	6014      	str	r4, [r2, #0]
 8000c8a:	4628      	mov	r0, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b8dc 	b.w	8000e4c <__malloc_unlock>
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d908      	bls.n	8000caa <_free_r+0x42>
 8000c98:	6820      	ldr	r0, [r4, #0]
 8000c9a:	1821      	adds	r1, r4, r0
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	bf01      	itttt	eq
 8000ca0:	6819      	ldreq	r1, [r3, #0]
 8000ca2:	685b      	ldreq	r3, [r3, #4]
 8000ca4:	1809      	addeq	r1, r1, r0
 8000ca6:	6021      	streq	r1, [r4, #0]
 8000ca8:	e7ed      	b.n	8000c86 <_free_r+0x1e>
 8000caa:	461a      	mov	r2, r3
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	b10b      	cbz	r3, 8000cb4 <_free_r+0x4c>
 8000cb0:	42a3      	cmp	r3, r4
 8000cb2:	d9fa      	bls.n	8000caa <_free_r+0x42>
 8000cb4:	6811      	ldr	r1, [r2, #0]
 8000cb6:	1850      	adds	r0, r2, r1
 8000cb8:	42a0      	cmp	r0, r4
 8000cba:	d10b      	bne.n	8000cd4 <_free_r+0x6c>
 8000cbc:	6820      	ldr	r0, [r4, #0]
 8000cbe:	4401      	add	r1, r0
 8000cc0:	1850      	adds	r0, r2, r1
 8000cc2:	4283      	cmp	r3, r0
 8000cc4:	6011      	str	r1, [r2, #0]
 8000cc6:	d1e0      	bne.n	8000c8a <_free_r+0x22>
 8000cc8:	6818      	ldr	r0, [r3, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	6053      	str	r3, [r2, #4]
 8000cce:	4408      	add	r0, r1
 8000cd0:	6010      	str	r0, [r2, #0]
 8000cd2:	e7da      	b.n	8000c8a <_free_r+0x22>
 8000cd4:	d902      	bls.n	8000cdc <_free_r+0x74>
 8000cd6:	230c      	movs	r3, #12
 8000cd8:	602b      	str	r3, [r5, #0]
 8000cda:	e7d6      	b.n	8000c8a <_free_r+0x22>
 8000cdc:	6820      	ldr	r0, [r4, #0]
 8000cde:	1821      	adds	r1, r4, r0
 8000ce0:	428b      	cmp	r3, r1
 8000ce2:	bf04      	itt	eq
 8000ce4:	6819      	ldreq	r1, [r3, #0]
 8000ce6:	685b      	ldreq	r3, [r3, #4]
 8000ce8:	6063      	str	r3, [r4, #4]
 8000cea:	bf04      	itt	eq
 8000cec:	1809      	addeq	r1, r1, r0
 8000cee:	6021      	streq	r1, [r4, #0]
 8000cf0:	6054      	str	r4, [r2, #4]
 8000cf2:	e7ca      	b.n	8000c8a <_free_r+0x22>
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200001c4 	.word	0x200001c4

08000cfc <sbrk_aligned>:
 8000cfc:	b570      	push	{r4, r5, r6, lr}
 8000cfe:	4e0f      	ldr	r6, [pc, #60]	@ (8000d3c <sbrk_aligned+0x40>)
 8000d00:	460c      	mov	r4, r1
 8000d02:	6831      	ldr	r1, [r6, #0]
 8000d04:	4605      	mov	r5, r0
 8000d06:	b911      	cbnz	r1, 8000d0e <sbrk_aligned+0x12>
 8000d08:	f000 f9d6 	bl	80010b8 <_sbrk_r>
 8000d0c:	6030      	str	r0, [r6, #0]
 8000d0e:	4621      	mov	r1, r4
 8000d10:	4628      	mov	r0, r5
 8000d12:	f000 f9d1 	bl	80010b8 <_sbrk_r>
 8000d16:	1c43      	adds	r3, r0, #1
 8000d18:	d103      	bne.n	8000d22 <sbrk_aligned+0x26>
 8000d1a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000d1e:	4620      	mov	r0, r4
 8000d20:	bd70      	pop	{r4, r5, r6, pc}
 8000d22:	1cc4      	adds	r4, r0, #3
 8000d24:	f024 0403 	bic.w	r4, r4, #3
 8000d28:	42a0      	cmp	r0, r4
 8000d2a:	d0f8      	beq.n	8000d1e <sbrk_aligned+0x22>
 8000d2c:	1a21      	subs	r1, r4, r0
 8000d2e:	4628      	mov	r0, r5
 8000d30:	f000 f9c2 	bl	80010b8 <_sbrk_r>
 8000d34:	3001      	adds	r0, #1
 8000d36:	d1f2      	bne.n	8000d1e <sbrk_aligned+0x22>
 8000d38:	e7ef      	b.n	8000d1a <sbrk_aligned+0x1e>
 8000d3a:	bf00      	nop
 8000d3c:	200001c0 	.word	0x200001c0

08000d40 <_malloc_r>:
 8000d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d44:	1ccd      	adds	r5, r1, #3
 8000d46:	f025 0503 	bic.w	r5, r5, #3
 8000d4a:	3508      	adds	r5, #8
 8000d4c:	2d0c      	cmp	r5, #12
 8000d4e:	bf38      	it	cc
 8000d50:	250c      	movcc	r5, #12
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	4606      	mov	r6, r0
 8000d56:	db01      	blt.n	8000d5c <_malloc_r+0x1c>
 8000d58:	42a9      	cmp	r1, r5
 8000d5a:	d904      	bls.n	8000d66 <_malloc_r+0x26>
 8000d5c:	230c      	movs	r3, #12
 8000d5e:	6033      	str	r3, [r6, #0]
 8000d60:	2000      	movs	r0, #0
 8000d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000e3c <_malloc_r+0xfc>
 8000d6a:	f000 f869 	bl	8000e40 <__malloc_lock>
 8000d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8000d72:	461c      	mov	r4, r3
 8000d74:	bb44      	cbnz	r4, 8000dc8 <_malloc_r+0x88>
 8000d76:	4629      	mov	r1, r5
 8000d78:	4630      	mov	r0, r6
 8000d7a:	f7ff ffbf 	bl	8000cfc <sbrk_aligned>
 8000d7e:	1c43      	adds	r3, r0, #1
 8000d80:	4604      	mov	r4, r0
 8000d82:	d158      	bne.n	8000e36 <_malloc_r+0xf6>
 8000d84:	f8d8 4000 	ldr.w	r4, [r8]
 8000d88:	4627      	mov	r7, r4
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d143      	bne.n	8000e16 <_malloc_r+0xd6>
 8000d8e:	2c00      	cmp	r4, #0
 8000d90:	d04b      	beq.n	8000e2a <_malloc_r+0xea>
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	4639      	mov	r1, r7
 8000d96:	4630      	mov	r0, r6
 8000d98:	eb04 0903 	add.w	r9, r4, r3
 8000d9c:	f000 f98c 	bl	80010b8 <_sbrk_r>
 8000da0:	4581      	cmp	r9, r0
 8000da2:	d142      	bne.n	8000e2a <_malloc_r+0xea>
 8000da4:	6821      	ldr	r1, [r4, #0]
 8000da6:	1a6d      	subs	r5, r5, r1
 8000da8:	4629      	mov	r1, r5
 8000daa:	4630      	mov	r0, r6
 8000dac:	f7ff ffa6 	bl	8000cfc <sbrk_aligned>
 8000db0:	3001      	adds	r0, #1
 8000db2:	d03a      	beq.n	8000e2a <_malloc_r+0xea>
 8000db4:	6823      	ldr	r3, [r4, #0]
 8000db6:	442b      	add	r3, r5
 8000db8:	6023      	str	r3, [r4, #0]
 8000dba:	f8d8 3000 	ldr.w	r3, [r8]
 8000dbe:	685a      	ldr	r2, [r3, #4]
 8000dc0:	bb62      	cbnz	r2, 8000e1c <_malloc_r+0xdc>
 8000dc2:	f8c8 7000 	str.w	r7, [r8]
 8000dc6:	e00f      	b.n	8000de8 <_malloc_r+0xa8>
 8000dc8:	6822      	ldr	r2, [r4, #0]
 8000dca:	1b52      	subs	r2, r2, r5
 8000dcc:	d420      	bmi.n	8000e10 <_malloc_r+0xd0>
 8000dce:	2a0b      	cmp	r2, #11
 8000dd0:	d917      	bls.n	8000e02 <_malloc_r+0xc2>
 8000dd2:	1961      	adds	r1, r4, r5
 8000dd4:	42a3      	cmp	r3, r4
 8000dd6:	6025      	str	r5, [r4, #0]
 8000dd8:	bf18      	it	ne
 8000dda:	6059      	strne	r1, [r3, #4]
 8000ddc:	6863      	ldr	r3, [r4, #4]
 8000dde:	bf08      	it	eq
 8000de0:	f8c8 1000 	streq.w	r1, [r8]
 8000de4:	5162      	str	r2, [r4, r5]
 8000de6:	604b      	str	r3, [r1, #4]
 8000de8:	4630      	mov	r0, r6
 8000dea:	f000 f82f 	bl	8000e4c <__malloc_unlock>
 8000dee:	f104 000b 	add.w	r0, r4, #11
 8000df2:	1d23      	adds	r3, r4, #4
 8000df4:	f020 0007 	bic.w	r0, r0, #7
 8000df8:	1ac2      	subs	r2, r0, r3
 8000dfa:	bf1c      	itt	ne
 8000dfc:	1a1b      	subne	r3, r3, r0
 8000dfe:	50a3      	strne	r3, [r4, r2]
 8000e00:	e7af      	b.n	8000d62 <_malloc_r+0x22>
 8000e02:	6862      	ldr	r2, [r4, #4]
 8000e04:	42a3      	cmp	r3, r4
 8000e06:	bf0c      	ite	eq
 8000e08:	f8c8 2000 	streq.w	r2, [r8]
 8000e0c:	605a      	strne	r2, [r3, #4]
 8000e0e:	e7eb      	b.n	8000de8 <_malloc_r+0xa8>
 8000e10:	4623      	mov	r3, r4
 8000e12:	6864      	ldr	r4, [r4, #4]
 8000e14:	e7ae      	b.n	8000d74 <_malloc_r+0x34>
 8000e16:	463c      	mov	r4, r7
 8000e18:	687f      	ldr	r7, [r7, #4]
 8000e1a:	e7b6      	b.n	8000d8a <_malloc_r+0x4a>
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	42a3      	cmp	r3, r4
 8000e22:	d1fb      	bne.n	8000e1c <_malloc_r+0xdc>
 8000e24:	2300      	movs	r3, #0
 8000e26:	6053      	str	r3, [r2, #4]
 8000e28:	e7de      	b.n	8000de8 <_malloc_r+0xa8>
 8000e2a:	230c      	movs	r3, #12
 8000e2c:	6033      	str	r3, [r6, #0]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	f000 f80c 	bl	8000e4c <__malloc_unlock>
 8000e34:	e794      	b.n	8000d60 <_malloc_r+0x20>
 8000e36:	6005      	str	r5, [r0, #0]
 8000e38:	e7d6      	b.n	8000de8 <_malloc_r+0xa8>
 8000e3a:	bf00      	nop
 8000e3c:	200001c4 	.word	0x200001c4

08000e40 <__malloc_lock>:
 8000e40:	4801      	ldr	r0, [pc, #4]	@ (8000e48 <__malloc_lock+0x8>)
 8000e42:	f7ff bf0e 	b.w	8000c62 <__retarget_lock_acquire_recursive>
 8000e46:	bf00      	nop
 8000e48:	200001bc 	.word	0x200001bc

08000e4c <__malloc_unlock>:
 8000e4c:	4801      	ldr	r0, [pc, #4]	@ (8000e54 <__malloc_unlock+0x8>)
 8000e4e:	f7ff bf09 	b.w	8000c64 <__retarget_lock_release_recursive>
 8000e52:	bf00      	nop
 8000e54:	200001bc 	.word	0x200001bc

08000e58 <__sflush_r>:
 8000e58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e60:	0716      	lsls	r6, r2, #28
 8000e62:	4605      	mov	r5, r0
 8000e64:	460c      	mov	r4, r1
 8000e66:	d454      	bmi.n	8000f12 <__sflush_r+0xba>
 8000e68:	684b      	ldr	r3, [r1, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	dc02      	bgt.n	8000e74 <__sflush_r+0x1c>
 8000e6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	dd48      	ble.n	8000f06 <__sflush_r+0xae>
 8000e74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d045      	beq.n	8000f06 <__sflush_r+0xae>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000e80:	682f      	ldr	r7, [r5, #0]
 8000e82:	6a21      	ldr	r1, [r4, #32]
 8000e84:	602b      	str	r3, [r5, #0]
 8000e86:	d030      	beq.n	8000eea <__sflush_r+0x92>
 8000e88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000e8a:	89a3      	ldrh	r3, [r4, #12]
 8000e8c:	0759      	lsls	r1, r3, #29
 8000e8e:	d505      	bpl.n	8000e9c <__sflush_r+0x44>
 8000e90:	6863      	ldr	r3, [r4, #4]
 8000e92:	1ad2      	subs	r2, r2, r3
 8000e94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000e96:	b10b      	cbz	r3, 8000e9c <__sflush_r+0x44>
 8000e98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000e9a:	1ad2      	subs	r2, r2, r3
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000ea0:	6a21      	ldr	r1, [r4, #32]
 8000ea2:	4628      	mov	r0, r5
 8000ea4:	47b0      	blx	r6
 8000ea6:	1c43      	adds	r3, r0, #1
 8000ea8:	89a3      	ldrh	r3, [r4, #12]
 8000eaa:	d106      	bne.n	8000eba <__sflush_r+0x62>
 8000eac:	6829      	ldr	r1, [r5, #0]
 8000eae:	291d      	cmp	r1, #29
 8000eb0:	d82b      	bhi.n	8000f0a <__sflush_r+0xb2>
 8000eb2:	4a2a      	ldr	r2, [pc, #168]	@ (8000f5c <__sflush_r+0x104>)
 8000eb4:	410a      	asrs	r2, r1
 8000eb6:	07d6      	lsls	r6, r2, #31
 8000eb8:	d427      	bmi.n	8000f0a <__sflush_r+0xb2>
 8000eba:	2200      	movs	r2, #0
 8000ebc:	6062      	str	r2, [r4, #4]
 8000ebe:	04d9      	lsls	r1, r3, #19
 8000ec0:	6922      	ldr	r2, [r4, #16]
 8000ec2:	6022      	str	r2, [r4, #0]
 8000ec4:	d504      	bpl.n	8000ed0 <__sflush_r+0x78>
 8000ec6:	1c42      	adds	r2, r0, #1
 8000ec8:	d101      	bne.n	8000ece <__sflush_r+0x76>
 8000eca:	682b      	ldr	r3, [r5, #0]
 8000ecc:	b903      	cbnz	r3, 8000ed0 <__sflush_r+0x78>
 8000ece:	6560      	str	r0, [r4, #84]	@ 0x54
 8000ed0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000ed2:	602f      	str	r7, [r5, #0]
 8000ed4:	b1b9      	cbz	r1, 8000f06 <__sflush_r+0xae>
 8000ed6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000eda:	4299      	cmp	r1, r3
 8000edc:	d002      	beq.n	8000ee4 <__sflush_r+0x8c>
 8000ede:	4628      	mov	r0, r5
 8000ee0:	f7ff fec2 	bl	8000c68 <_free_r>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	6363      	str	r3, [r4, #52]	@ 0x34
 8000ee8:	e00d      	b.n	8000f06 <__sflush_r+0xae>
 8000eea:	2301      	movs	r3, #1
 8000eec:	4628      	mov	r0, r5
 8000eee:	47b0      	blx	r6
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	1c50      	adds	r0, r2, #1
 8000ef4:	d1c9      	bne.n	8000e8a <__sflush_r+0x32>
 8000ef6:	682b      	ldr	r3, [r5, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0c6      	beq.n	8000e8a <__sflush_r+0x32>
 8000efc:	2b1d      	cmp	r3, #29
 8000efe:	d001      	beq.n	8000f04 <__sflush_r+0xac>
 8000f00:	2b16      	cmp	r3, #22
 8000f02:	d11e      	bne.n	8000f42 <__sflush_r+0xea>
 8000f04:	602f      	str	r7, [r5, #0]
 8000f06:	2000      	movs	r0, #0
 8000f08:	e022      	b.n	8000f50 <__sflush_r+0xf8>
 8000f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	e01b      	b.n	8000f4a <__sflush_r+0xf2>
 8000f12:	690f      	ldr	r7, [r1, #16]
 8000f14:	2f00      	cmp	r7, #0
 8000f16:	d0f6      	beq.n	8000f06 <__sflush_r+0xae>
 8000f18:	0793      	lsls	r3, r2, #30
 8000f1a:	680e      	ldr	r6, [r1, #0]
 8000f1c:	bf08      	it	eq
 8000f1e:	694b      	ldreq	r3, [r1, #20]
 8000f20:	600f      	str	r7, [r1, #0]
 8000f22:	bf18      	it	ne
 8000f24:	2300      	movne	r3, #0
 8000f26:	eba6 0807 	sub.w	r8, r6, r7
 8000f2a:	608b      	str	r3, [r1, #8]
 8000f2c:	f1b8 0f00 	cmp.w	r8, #0
 8000f30:	dde9      	ble.n	8000f06 <__sflush_r+0xae>
 8000f32:	6a21      	ldr	r1, [r4, #32]
 8000f34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000f36:	4643      	mov	r3, r8
 8000f38:	463a      	mov	r2, r7
 8000f3a:	4628      	mov	r0, r5
 8000f3c:	47b0      	blx	r6
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	dc08      	bgt.n	8000f54 <__sflush_r+0xfc>
 8000f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f4a:	81a3      	strh	r3, [r4, #12]
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f54:	4407      	add	r7, r0
 8000f56:	eba8 0800 	sub.w	r8, r8, r0
 8000f5a:	e7e7      	b.n	8000f2c <__sflush_r+0xd4>
 8000f5c:	dfbffffe 	.word	0xdfbffffe

08000f60 <_fflush_r>:
 8000f60:	b538      	push	{r3, r4, r5, lr}
 8000f62:	690b      	ldr	r3, [r1, #16]
 8000f64:	4605      	mov	r5, r0
 8000f66:	460c      	mov	r4, r1
 8000f68:	b913      	cbnz	r3, 8000f70 <_fflush_r+0x10>
 8000f6a:	2500      	movs	r5, #0
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	bd38      	pop	{r3, r4, r5, pc}
 8000f70:	b118      	cbz	r0, 8000f7a <_fflush_r+0x1a>
 8000f72:	6a03      	ldr	r3, [r0, #32]
 8000f74:	b90b      	cbnz	r3, 8000f7a <_fflush_r+0x1a>
 8000f76:	f7ff fc8f 	bl	8000898 <__sinit>
 8000f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0f3      	beq.n	8000f6a <_fflush_r+0xa>
 8000f82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000f84:	07d0      	lsls	r0, r2, #31
 8000f86:	d404      	bmi.n	8000f92 <_fflush_r+0x32>
 8000f88:	0599      	lsls	r1, r3, #22
 8000f8a:	d402      	bmi.n	8000f92 <_fflush_r+0x32>
 8000f8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000f8e:	f7ff fe68 	bl	8000c62 <__retarget_lock_acquire_recursive>
 8000f92:	4628      	mov	r0, r5
 8000f94:	4621      	mov	r1, r4
 8000f96:	f7ff ff5f 	bl	8000e58 <__sflush_r>
 8000f9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000f9c:	07da      	lsls	r2, r3, #31
 8000f9e:	4605      	mov	r5, r0
 8000fa0:	d4e4      	bmi.n	8000f6c <_fflush_r+0xc>
 8000fa2:	89a3      	ldrh	r3, [r4, #12]
 8000fa4:	059b      	lsls	r3, r3, #22
 8000fa6:	d4e1      	bmi.n	8000f6c <_fflush_r+0xc>
 8000fa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000faa:	f7ff fe5b 	bl	8000c64 <__retarget_lock_release_recursive>
 8000fae:	e7dd      	b.n	8000f6c <_fflush_r+0xc>

08000fb0 <__swhatbuf_r>:
 8000fb0:	b570      	push	{r4, r5, r6, lr}
 8000fb2:	460c      	mov	r4, r1
 8000fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fb8:	2900      	cmp	r1, #0
 8000fba:	b096      	sub	sp, #88	@ 0x58
 8000fbc:	4615      	mov	r5, r2
 8000fbe:	461e      	mov	r6, r3
 8000fc0:	da0d      	bge.n	8000fde <__swhatbuf_r+0x2e>
 8000fc2:	89a3      	ldrh	r3, [r4, #12]
 8000fc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000fc8:	f04f 0100 	mov.w	r1, #0
 8000fcc:	bf14      	ite	ne
 8000fce:	2340      	movne	r3, #64	@ 0x40
 8000fd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	6031      	str	r1, [r6, #0]
 8000fd8:	602b      	str	r3, [r5, #0]
 8000fda:	b016      	add	sp, #88	@ 0x58
 8000fdc:	bd70      	pop	{r4, r5, r6, pc}
 8000fde:	466a      	mov	r2, sp
 8000fe0:	f000 f848 	bl	8001074 <_fstat_r>
 8000fe4:	2800      	cmp	r0, #0
 8000fe6:	dbec      	blt.n	8000fc2 <__swhatbuf_r+0x12>
 8000fe8:	9901      	ldr	r1, [sp, #4]
 8000fea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000fee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000ff2:	4259      	negs	r1, r3
 8000ff4:	4159      	adcs	r1, r3
 8000ff6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ffa:	e7eb      	b.n	8000fd4 <__swhatbuf_r+0x24>

08000ffc <__smakebuf_r>:
 8000ffc:	898b      	ldrh	r3, [r1, #12]
 8000ffe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001000:	079d      	lsls	r5, r3, #30
 8001002:	4606      	mov	r6, r0
 8001004:	460c      	mov	r4, r1
 8001006:	d507      	bpl.n	8001018 <__smakebuf_r+0x1c>
 8001008:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800100c:	6023      	str	r3, [r4, #0]
 800100e:	6123      	str	r3, [r4, #16]
 8001010:	2301      	movs	r3, #1
 8001012:	6163      	str	r3, [r4, #20]
 8001014:	b003      	add	sp, #12
 8001016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001018:	ab01      	add	r3, sp, #4
 800101a:	466a      	mov	r2, sp
 800101c:	f7ff ffc8 	bl	8000fb0 <__swhatbuf_r>
 8001020:	9f00      	ldr	r7, [sp, #0]
 8001022:	4605      	mov	r5, r0
 8001024:	4639      	mov	r1, r7
 8001026:	4630      	mov	r0, r6
 8001028:	f7ff fe8a 	bl	8000d40 <_malloc_r>
 800102c:	b948      	cbnz	r0, 8001042 <__smakebuf_r+0x46>
 800102e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001032:	059a      	lsls	r2, r3, #22
 8001034:	d4ee      	bmi.n	8001014 <__smakebuf_r+0x18>
 8001036:	f023 0303 	bic.w	r3, r3, #3
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	81a3      	strh	r3, [r4, #12]
 8001040:	e7e2      	b.n	8001008 <__smakebuf_r+0xc>
 8001042:	89a3      	ldrh	r3, [r4, #12]
 8001044:	6020      	str	r0, [r4, #0]
 8001046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800104a:	81a3      	strh	r3, [r4, #12]
 800104c:	9b01      	ldr	r3, [sp, #4]
 800104e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001052:	b15b      	cbz	r3, 800106c <__smakebuf_r+0x70>
 8001054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001058:	4630      	mov	r0, r6
 800105a:	f000 f81d 	bl	8001098 <_isatty_r>
 800105e:	b128      	cbz	r0, 800106c <__smakebuf_r+0x70>
 8001060:	89a3      	ldrh	r3, [r4, #12]
 8001062:	f023 0303 	bic.w	r3, r3, #3
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	81a3      	strh	r3, [r4, #12]
 800106c:	89a3      	ldrh	r3, [r4, #12]
 800106e:	431d      	orrs	r5, r3
 8001070:	81a5      	strh	r5, [r4, #12]
 8001072:	e7cf      	b.n	8001014 <__smakebuf_r+0x18>

08001074 <_fstat_r>:
 8001074:	b538      	push	{r3, r4, r5, lr}
 8001076:	4d07      	ldr	r5, [pc, #28]	@ (8001094 <_fstat_r+0x20>)
 8001078:	2300      	movs	r3, #0
 800107a:	4604      	mov	r4, r0
 800107c:	4608      	mov	r0, r1
 800107e:	4611      	mov	r1, r2
 8001080:	602b      	str	r3, [r5, #0]
 8001082:	f7ff faf4 	bl	800066e <_fstat>
 8001086:	1c43      	adds	r3, r0, #1
 8001088:	d102      	bne.n	8001090 <_fstat_r+0x1c>
 800108a:	682b      	ldr	r3, [r5, #0]
 800108c:	b103      	cbz	r3, 8001090 <_fstat_r+0x1c>
 800108e:	6023      	str	r3, [r4, #0]
 8001090:	bd38      	pop	{r3, r4, r5, pc}
 8001092:	bf00      	nop
 8001094:	200001b8 	.word	0x200001b8

08001098 <_isatty_r>:
 8001098:	b538      	push	{r3, r4, r5, lr}
 800109a:	4d06      	ldr	r5, [pc, #24]	@ (80010b4 <_isatty_r+0x1c>)
 800109c:	2300      	movs	r3, #0
 800109e:	4604      	mov	r4, r0
 80010a0:	4608      	mov	r0, r1
 80010a2:	602b      	str	r3, [r5, #0]
 80010a4:	f7ff faf3 	bl	800068e <_isatty>
 80010a8:	1c43      	adds	r3, r0, #1
 80010aa:	d102      	bne.n	80010b2 <_isatty_r+0x1a>
 80010ac:	682b      	ldr	r3, [r5, #0]
 80010ae:	b103      	cbz	r3, 80010b2 <_isatty_r+0x1a>
 80010b0:	6023      	str	r3, [r4, #0]
 80010b2:	bd38      	pop	{r3, r4, r5, pc}
 80010b4:	200001b8 	.word	0x200001b8

080010b8 <_sbrk_r>:
 80010b8:	b538      	push	{r3, r4, r5, lr}
 80010ba:	4d06      	ldr	r5, [pc, #24]	@ (80010d4 <_sbrk_r+0x1c>)
 80010bc:	2300      	movs	r3, #0
 80010be:	4604      	mov	r4, r0
 80010c0:	4608      	mov	r0, r1
 80010c2:	602b      	str	r3, [r5, #0]
 80010c4:	f7ff fafc 	bl	80006c0 <_sbrk>
 80010c8:	1c43      	adds	r3, r0, #1
 80010ca:	d102      	bne.n	80010d2 <_sbrk_r+0x1a>
 80010cc:	682b      	ldr	r3, [r5, #0]
 80010ce:	b103      	cbz	r3, 80010d2 <_sbrk_r+0x1a>
 80010d0:	6023      	str	r3, [r4, #0]
 80010d2:	bd38      	pop	{r3, r4, r5, pc}
 80010d4:	200001b8 	.word	0x200001b8

080010d8 <_init>:
 80010d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010da:	bf00      	nop
 80010dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010de:	bc08      	pop	{r3}
 80010e0:	469e      	mov	lr, r3
 80010e2:	4770      	bx	lr

080010e4 <_fini>:
 80010e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010e6:	bf00      	nop
 80010e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ea:	bc08      	pop	{r3}
 80010ec:	469e      	mov	lr, r3
 80010ee:	4770      	bx	lr
