
013KeypadPassword.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000111c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080012a4  080012a4  000022a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001360  08001360  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001360  08001360  00002360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001368  08001368  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001368  08001368  00002368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800136c  0800136c  0000236c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001370  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f28  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003aa  00000000  00000000  00003fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000128  00000000  00000000  00004360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000cc  00000000  00000000  00004488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d40  00000000  00000000  00004554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000136e  00000000  00000000  00007294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009a5e  00000000  00000000  00008602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00012060  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a44  00000000  00000000  000120a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00012ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800128c 	.word	0x0800128c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	0800128c 	.word	0x0800128c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <delay>:
#include "main.h"
//#if !defined(__SOFT_FP__) && defined(__ARM_FP)
//  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
//#endif

void delay(void){
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 300000; i++);
 80001f2:	2300      	movs	r3, #0
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	e002      	b.n	80001fe <delay+0x12>
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	3301      	adds	r3, #1
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4a04      	ldr	r2, [pc, #16]	@ (8000214 <delay+0x28>)
 8000202:	4293      	cmp	r3, r2
 8000204:	d9f8      	bls.n	80001f8 <delay+0xc>
}
 8000206:	bf00      	nop
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	000493df 	.word	0x000493df

08000218 <keypadPress>:

uint8_t keypadPress(GPIOx_IDR_t *input, GPIOx_ODR_t *output, char *password, char *temp){
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
 8000224:	603b      	str	r3, [r7, #0]
	uint8_t state = 1;
 8000226:	2301      	movs	r3, #1
 8000228:	75fb      	strb	r3, [r7, #23]
	output->pin_0 = 1;
 800022a:	68ba      	ldr	r2, [r7, #8]
 800022c:	7813      	ldrb	r3, [r2, #0]
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	7013      	strb	r3, [r2, #0]
	output->pin_1 = 1;
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	7813      	ldrb	r3, [r2, #0]
 8000238:	f043 0302 	orr.w	r3, r3, #2
 800023c:	7013      	strb	r3, [r2, #0]
	output->pin_2 = 1;
 800023e:	68ba      	ldr	r2, [r7, #8]
 8000240:	7813      	ldrb	r3, [r2, #0]
 8000242:	f043 0304 	orr.w	r3, r3, #4
 8000246:	7013      	strb	r3, [r2, #0]
	output->pin_3 = 1;
 8000248:	68ba      	ldr	r2, [r7, #8]
 800024a:	7813      	ldrb	r3, [r2, #0]
 800024c:	f043 0308 	orr.w	r3, r3, #8
 8000250:	7013      	strb	r3, [r2, #0]
	output->pin_0 = 0;
 8000252:	68ba      	ldr	r2, [r7, #8]
 8000254:	7813      	ldrb	r3, [r2, #0]
 8000256:	f36f 0300 	bfc	r3, #0, #1
 800025a:	7013      	strb	r3, [r2, #0]
	if(!(input->pin_8 == 1)){
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	785b      	ldrb	r3, [r3, #1]
 8000260:	f003 0301 	and.w	r3, r3, #1
 8000264:	b2db      	uxtb	r3, r3
 8000266:	2b00      	cmp	r3, #0
 8000268:	d10d      	bne.n	8000286 <keypadPress+0x6e>
		delay();
 800026a:	f7ff ffbf 	bl	80001ec <delay>
		strcat(temp, "1");
 800026e:	6838      	ldr	r0, [r7, #0]
 8000270:	f7ff ffb4 	bl	80001dc <strlen>
 8000274:	4603      	mov	r3, r0
 8000276:	461a      	mov	r2, r3
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	4413      	add	r3, r2
 800027c:	49bc      	ldr	r1, [pc, #752]	@ (8000570 <keypadPress+0x358>)
 800027e:	461a      	mov	r2, r3
 8000280:	460b      	mov	r3, r1
 8000282:	881b      	ldrh	r3, [r3, #0]
 8000284:	8013      	strh	r3, [r2, #0]

	}
	if(!(input->pin_9 == 1)){
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	785b      	ldrb	r3, [r3, #1]
 800028a:	f003 0302 	and.w	r3, r3, #2
 800028e:	b2db      	uxtb	r3, r3
 8000290:	2b00      	cmp	r3, #0
 8000292:	d10d      	bne.n	80002b0 <keypadPress+0x98>
		delay();
 8000294:	f7ff ffaa 	bl	80001ec <delay>
		strcat(temp, "2");
 8000298:	6838      	ldr	r0, [r7, #0]
 800029a:	f7ff ff9f 	bl	80001dc <strlen>
 800029e:	4603      	mov	r3, r0
 80002a0:	461a      	mov	r2, r3
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	4413      	add	r3, r2
 80002a6:	49b3      	ldr	r1, [pc, #716]	@ (8000574 <keypadPress+0x35c>)
 80002a8:	461a      	mov	r2, r3
 80002aa:	460b      	mov	r3, r1
 80002ac:	881b      	ldrh	r3, [r3, #0]
 80002ae:	8013      	strh	r3, [r2, #0]
	}
	if(!(input->pin_10 == 1)){
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	785b      	ldrb	r3, [r3, #1]
 80002b4:	f003 0304 	and.w	r3, r3, #4
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d10d      	bne.n	80002da <keypadPress+0xc2>
		delay();
 80002be:	f7ff ff95 	bl	80001ec <delay>
		strcat(temp, "3");
 80002c2:	6838      	ldr	r0, [r7, #0]
 80002c4:	f7ff ff8a 	bl	80001dc <strlen>
 80002c8:	4603      	mov	r3, r0
 80002ca:	461a      	mov	r2, r3
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	4413      	add	r3, r2
 80002d0:	49a9      	ldr	r1, [pc, #676]	@ (8000578 <keypadPress+0x360>)
 80002d2:	461a      	mov	r2, r3
 80002d4:	460b      	mov	r3, r1
 80002d6:	881b      	ldrh	r3, [r3, #0]
 80002d8:	8013      	strh	r3, [r2, #0]
	}
	if(!(input->pin_11 == 1)){
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	785b      	ldrb	r3, [r3, #1]
 80002de:	f003 0308 	and.w	r3, r3, #8
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d10d      	bne.n	8000304 <keypadPress+0xec>
		delay();
 80002e8:	f7ff ff80 	bl	80001ec <delay>
		strcat(temp, "A");
 80002ec:	6838      	ldr	r0, [r7, #0]
 80002ee:	f7ff ff75 	bl	80001dc <strlen>
 80002f2:	4603      	mov	r3, r0
 80002f4:	461a      	mov	r2, r3
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	4413      	add	r3, r2
 80002fa:	49a0      	ldr	r1, [pc, #640]	@ (800057c <keypadPress+0x364>)
 80002fc:	461a      	mov	r2, r3
 80002fe:	460b      	mov	r3, r1
 8000300:	881b      	ldrh	r3, [r3, #0]
 8000302:	8013      	strh	r3, [r2, #0]
	}

	output->pin_0 = 1;
 8000304:	68ba      	ldr	r2, [r7, #8]
 8000306:	7813      	ldrb	r3, [r2, #0]
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	7013      	strb	r3, [r2, #0]
	output->pin_1 = 1;
 800030e:	68ba      	ldr	r2, [r7, #8]
 8000310:	7813      	ldrb	r3, [r2, #0]
 8000312:	f043 0302 	orr.w	r3, r3, #2
 8000316:	7013      	strb	r3, [r2, #0]
	output->pin_2 = 1;
 8000318:	68ba      	ldr	r2, [r7, #8]
 800031a:	7813      	ldrb	r3, [r2, #0]
 800031c:	f043 0304 	orr.w	r3, r3, #4
 8000320:	7013      	strb	r3, [r2, #0]
	output->pin_3 = 1;
 8000322:	68ba      	ldr	r2, [r7, #8]
 8000324:	7813      	ldrb	r3, [r2, #0]
 8000326:	f043 0308 	orr.w	r3, r3, #8
 800032a:	7013      	strb	r3, [r2, #0]
	output->pin_1 = 0;
 800032c:	68ba      	ldr	r2, [r7, #8]
 800032e:	7813      	ldrb	r3, [r2, #0]
 8000330:	f36f 0341 	bfc	r3, #1, #1
 8000334:	7013      	strb	r3, [r2, #0]
	if(!(input->pin_8 == 1)){
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	785b      	ldrb	r3, [r3, #1]
 800033a:	f003 0301 	and.w	r3, r3, #1
 800033e:	b2db      	uxtb	r3, r3
 8000340:	2b00      	cmp	r3, #0
 8000342:	d10d      	bne.n	8000360 <keypadPress+0x148>
		delay();
 8000344:	f7ff ff52 	bl	80001ec <delay>
		strcat(temp, "4");
 8000348:	6838      	ldr	r0, [r7, #0]
 800034a:	f7ff ff47 	bl	80001dc <strlen>
 800034e:	4603      	mov	r3, r0
 8000350:	461a      	mov	r2, r3
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	4413      	add	r3, r2
 8000356:	498a      	ldr	r1, [pc, #552]	@ (8000580 <keypadPress+0x368>)
 8000358:	461a      	mov	r2, r3
 800035a:	460b      	mov	r3, r1
 800035c:	881b      	ldrh	r3, [r3, #0]
 800035e:	8013      	strh	r3, [r2, #0]
	}
	if(!(input->pin_9 == 1)){
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	785b      	ldrb	r3, [r3, #1]
 8000364:	f003 0302 	and.w	r3, r3, #2
 8000368:	b2db      	uxtb	r3, r3
 800036a:	2b00      	cmp	r3, #0
 800036c:	d10d      	bne.n	800038a <keypadPress+0x172>
		delay();
 800036e:	f7ff ff3d 	bl	80001ec <delay>
		strcat(temp, "5");
 8000372:	6838      	ldr	r0, [r7, #0]
 8000374:	f7ff ff32 	bl	80001dc <strlen>
 8000378:	4603      	mov	r3, r0
 800037a:	461a      	mov	r2, r3
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	4413      	add	r3, r2
 8000380:	4980      	ldr	r1, [pc, #512]	@ (8000584 <keypadPress+0x36c>)
 8000382:	461a      	mov	r2, r3
 8000384:	460b      	mov	r3, r1
 8000386:	881b      	ldrh	r3, [r3, #0]
 8000388:	8013      	strh	r3, [r2, #0]
	}
	if(!(input->pin_10 == 1)){
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	785b      	ldrb	r3, [r3, #1]
 800038e:	f003 0304 	and.w	r3, r3, #4
 8000392:	b2db      	uxtb	r3, r3
 8000394:	2b00      	cmp	r3, #0
 8000396:	d10d      	bne.n	80003b4 <keypadPress+0x19c>
		delay();
 8000398:	f7ff ff28 	bl	80001ec <delay>
		strcat(temp, "6");
 800039c:	6838      	ldr	r0, [r7, #0]
 800039e:	f7ff ff1d 	bl	80001dc <strlen>
 80003a2:	4603      	mov	r3, r0
 80003a4:	461a      	mov	r2, r3
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	4413      	add	r3, r2
 80003aa:	4977      	ldr	r1, [pc, #476]	@ (8000588 <keypadPress+0x370>)
 80003ac:	461a      	mov	r2, r3
 80003ae:	460b      	mov	r3, r1
 80003b0:	881b      	ldrh	r3, [r3, #0]
 80003b2:	8013      	strh	r3, [r2, #0]
	}
	if(!(input->pin_11 == 1)){
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	785b      	ldrb	r3, [r3, #1]
 80003b8:	f003 0308 	and.w	r3, r3, #8
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d10d      	bne.n	80003de <keypadPress+0x1c6>
		delay();
 80003c2:	f7ff ff13 	bl	80001ec <delay>
		strcat(temp, "B");
 80003c6:	6838      	ldr	r0, [r7, #0]
 80003c8:	f7ff ff08 	bl	80001dc <strlen>
 80003cc:	4603      	mov	r3, r0
 80003ce:	461a      	mov	r2, r3
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	4413      	add	r3, r2
 80003d4:	496d      	ldr	r1, [pc, #436]	@ (800058c <keypadPress+0x374>)
 80003d6:	461a      	mov	r2, r3
 80003d8:	460b      	mov	r3, r1
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	8013      	strh	r3, [r2, #0]
	}

	output->pin_0 = 1;
 80003de:	68ba      	ldr	r2, [r7, #8]
 80003e0:	7813      	ldrb	r3, [r2, #0]
 80003e2:	f043 0301 	orr.w	r3, r3, #1
 80003e6:	7013      	strb	r3, [r2, #0]
	output->pin_1 = 1;
 80003e8:	68ba      	ldr	r2, [r7, #8]
 80003ea:	7813      	ldrb	r3, [r2, #0]
 80003ec:	f043 0302 	orr.w	r3, r3, #2
 80003f0:	7013      	strb	r3, [r2, #0]
	output->pin_2 = 1;
 80003f2:	68ba      	ldr	r2, [r7, #8]
 80003f4:	7813      	ldrb	r3, [r2, #0]
 80003f6:	f043 0304 	orr.w	r3, r3, #4
 80003fa:	7013      	strb	r3, [r2, #0]
	output->pin_3 = 1;
 80003fc:	68ba      	ldr	r2, [r7, #8]
 80003fe:	7813      	ldrb	r3, [r2, #0]
 8000400:	f043 0308 	orr.w	r3, r3, #8
 8000404:	7013      	strb	r3, [r2, #0]
	output->pin_2 = 0;
 8000406:	68ba      	ldr	r2, [r7, #8]
 8000408:	7813      	ldrb	r3, [r2, #0]
 800040a:	f36f 0382 	bfc	r3, #2, #1
 800040e:	7013      	strb	r3, [r2, #0]
	if(!(input->pin_8 == 1)){
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	785b      	ldrb	r3, [r3, #1]
 8000414:	f003 0301 	and.w	r3, r3, #1
 8000418:	b2db      	uxtb	r3, r3
 800041a:	2b00      	cmp	r3, #0
 800041c:	d10d      	bne.n	800043a <keypadPress+0x222>
		delay();
 800041e:	f7ff fee5 	bl	80001ec <delay>
		strcat(temp, "7");
 8000422:	6838      	ldr	r0, [r7, #0]
 8000424:	f7ff feda 	bl	80001dc <strlen>
 8000428:	4603      	mov	r3, r0
 800042a:	461a      	mov	r2, r3
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	4413      	add	r3, r2
 8000430:	4957      	ldr	r1, [pc, #348]	@ (8000590 <keypadPress+0x378>)
 8000432:	461a      	mov	r2, r3
 8000434:	460b      	mov	r3, r1
 8000436:	881b      	ldrh	r3, [r3, #0]
 8000438:	8013      	strh	r3, [r2, #0]
	}
	if(!(input->pin_9 == 1)){
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	785b      	ldrb	r3, [r3, #1]
 800043e:	f003 0302 	and.w	r3, r3, #2
 8000442:	b2db      	uxtb	r3, r3
 8000444:	2b00      	cmp	r3, #0
 8000446:	d10d      	bne.n	8000464 <keypadPress+0x24c>
		delay();
 8000448:	f7ff fed0 	bl	80001ec <delay>
		strcat(temp, "8");
 800044c:	6838      	ldr	r0, [r7, #0]
 800044e:	f7ff fec5 	bl	80001dc <strlen>
 8000452:	4603      	mov	r3, r0
 8000454:	461a      	mov	r2, r3
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	4413      	add	r3, r2
 800045a:	494e      	ldr	r1, [pc, #312]	@ (8000594 <keypadPress+0x37c>)
 800045c:	461a      	mov	r2, r3
 800045e:	460b      	mov	r3, r1
 8000460:	881b      	ldrh	r3, [r3, #0]
 8000462:	8013      	strh	r3, [r2, #0]
	}
	if(!(input->pin_10 == 1)){
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	785b      	ldrb	r3, [r3, #1]
 8000468:	f003 0304 	and.w	r3, r3, #4
 800046c:	b2db      	uxtb	r3, r3
 800046e:	2b00      	cmp	r3, #0
 8000470:	d10d      	bne.n	800048e <keypadPress+0x276>
		delay();
 8000472:	f7ff febb 	bl	80001ec <delay>
		strcat(temp, "9");
 8000476:	6838      	ldr	r0, [r7, #0]
 8000478:	f7ff feb0 	bl	80001dc <strlen>
 800047c:	4603      	mov	r3, r0
 800047e:	461a      	mov	r2, r3
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	4413      	add	r3, r2
 8000484:	4944      	ldr	r1, [pc, #272]	@ (8000598 <keypadPress+0x380>)
 8000486:	461a      	mov	r2, r3
 8000488:	460b      	mov	r3, r1
 800048a:	881b      	ldrh	r3, [r3, #0]
 800048c:	8013      	strh	r3, [r2, #0]
	}
	if(!(input->pin_11 == 1)){
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	785b      	ldrb	r3, [r3, #1]
 8000492:	f003 0308 	and.w	r3, r3, #8
 8000496:	b2db      	uxtb	r3, r3
 8000498:	2b00      	cmp	r3, #0
 800049a:	d10d      	bne.n	80004b8 <keypadPress+0x2a0>
		delay();
 800049c:	f7ff fea6 	bl	80001ec <delay>
		strcat(temp, "C");
 80004a0:	6838      	ldr	r0, [r7, #0]
 80004a2:	f7ff fe9b 	bl	80001dc <strlen>
 80004a6:	4603      	mov	r3, r0
 80004a8:	461a      	mov	r2, r3
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	4413      	add	r3, r2
 80004ae:	493b      	ldr	r1, [pc, #236]	@ (800059c <keypadPress+0x384>)
 80004b0:	461a      	mov	r2, r3
 80004b2:	460b      	mov	r3, r1
 80004b4:	881b      	ldrh	r3, [r3, #0]
 80004b6:	8013      	strh	r3, [r2, #0]
	}

	output->pin_0 = 1;
 80004b8:	68ba      	ldr	r2, [r7, #8]
 80004ba:	7813      	ldrb	r3, [r2, #0]
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	7013      	strb	r3, [r2, #0]
	output->pin_1 = 1;
 80004c2:	68ba      	ldr	r2, [r7, #8]
 80004c4:	7813      	ldrb	r3, [r2, #0]
 80004c6:	f043 0302 	orr.w	r3, r3, #2
 80004ca:	7013      	strb	r3, [r2, #0]
	output->pin_2 = 1;
 80004cc:	68ba      	ldr	r2, [r7, #8]
 80004ce:	7813      	ldrb	r3, [r2, #0]
 80004d0:	f043 0304 	orr.w	r3, r3, #4
 80004d4:	7013      	strb	r3, [r2, #0]
	output->pin_3 = 1;
 80004d6:	68ba      	ldr	r2, [r7, #8]
 80004d8:	7813      	ldrb	r3, [r2, #0]
 80004da:	f043 0308 	orr.w	r3, r3, #8
 80004de:	7013      	strb	r3, [r2, #0]
	output->pin_3 = 0;
 80004e0:	68ba      	ldr	r2, [r7, #8]
 80004e2:	7813      	ldrb	r3, [r2, #0]
 80004e4:	f36f 03c3 	bfc	r3, #3, #1
 80004e8:	7013      	strb	r3, [r2, #0]
	if(!(input->pin_8 == 1)){
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	785b      	ldrb	r3, [r3, #1]
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d10d      	bne.n	8000514 <keypadPress+0x2fc>
		delay();
 80004f8:	f7ff fe78 	bl	80001ec <delay>
		strcat(temp, "*");
 80004fc:	6838      	ldr	r0, [r7, #0]
 80004fe:	f7ff fe6d 	bl	80001dc <strlen>
 8000502:	4603      	mov	r3, r0
 8000504:	461a      	mov	r2, r3
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	4413      	add	r3, r2
 800050a:	4925      	ldr	r1, [pc, #148]	@ (80005a0 <keypadPress+0x388>)
 800050c:	461a      	mov	r2, r3
 800050e:	460b      	mov	r3, r1
 8000510:	881b      	ldrh	r3, [r3, #0]
 8000512:	8013      	strh	r3, [r2, #0]
	}
	if(!(input->pin_9 == 1)){
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	785b      	ldrb	r3, [r3, #1]
 8000518:	f003 0302 	and.w	r3, r3, #2
 800051c:	b2db      	uxtb	r3, r3
 800051e:	2b00      	cmp	r3, #0
 8000520:	d10d      	bne.n	800053e <keypadPress+0x326>
		delay();
 8000522:	f7ff fe63 	bl	80001ec <delay>
		strcat(temp, "0");
 8000526:	6838      	ldr	r0, [r7, #0]
 8000528:	f7ff fe58 	bl	80001dc <strlen>
 800052c:	4603      	mov	r3, r0
 800052e:	461a      	mov	r2, r3
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	4413      	add	r3, r2
 8000534:	491b      	ldr	r1, [pc, #108]	@ (80005a4 <keypadPress+0x38c>)
 8000536:	461a      	mov	r2, r3
 8000538:	460b      	mov	r3, r1
 800053a:	881b      	ldrh	r3, [r3, #0]
 800053c:	8013      	strh	r3, [r2, #0]
	}
	if(!(input->pin_10 == 1)){
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	785b      	ldrb	r3, [r3, #1]
 8000542:	f003 0304 	and.w	r3, r3, #4
 8000546:	b2db      	uxtb	r3, r3
 8000548:	2b00      	cmp	r3, #0
 800054a:	d130      	bne.n	80005ae <keypadPress+0x396>
		delay();
 800054c:	f7ff fe4e 	bl	80001ec <delay>
		state = strcmp(password, temp);
 8000550:	6839      	ldr	r1, [r7, #0]
 8000552:	6878      	ldr	r0, [r7, #4]
 8000554:	f7ff fe38 	bl	80001c8 <strcmp>
 8000558:	4603      	mov	r3, r0
 800055a:	75fb      	strb	r3, [r7, #23]
		if(state != 0){
 800055c:	7dfb      	ldrb	r3, [r7, #23]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d025      	beq.n	80005ae <keypadPress+0x396>
			printf("You have enter incorrect password. Please try again\n");
 8000562:	4811      	ldr	r0, [pc, #68]	@ (80005a8 <keypadPress+0x390>)
 8000564:	f000 fafe 	bl	8000b64 <puts>
			strcpy(temp, "");
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	2200      	movs	r2, #0
 800056c:	e01e      	b.n	80005ac <keypadPress+0x394>
 800056e:	bf00      	nop
 8000570:	080012a4 	.word	0x080012a4
 8000574:	080012a8 	.word	0x080012a8
 8000578:	080012ac 	.word	0x080012ac
 800057c:	080012b0 	.word	0x080012b0
 8000580:	080012b4 	.word	0x080012b4
 8000584:	080012b8 	.word	0x080012b8
 8000588:	080012bc 	.word	0x080012bc
 800058c:	080012c0 	.word	0x080012c0
 8000590:	080012c4 	.word	0x080012c4
 8000594:	080012c8 	.word	0x080012c8
 8000598:	080012cc 	.word	0x080012cc
 800059c:	080012d0 	.word	0x080012d0
 80005a0:	080012d4 	.word	0x080012d4
 80005a4:	080012d8 	.word	0x080012d8
 80005a8:	080012dc 	.word	0x080012dc
 80005ac:	701a      	strb	r2, [r3, #0]
		}
	}
	if(!(input->pin_11 == 1)){
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	785b      	ldrb	r3, [r3, #1]
 80005b2:	f003 0308 	and.w	r3, r3, #8
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d10d      	bne.n	80005d8 <keypadPress+0x3c0>
		delay();
 80005bc:	f7ff fe16 	bl	80001ec <delay>
		strcat(temp, "D");
 80005c0:	6838      	ldr	r0, [r7, #0]
 80005c2:	f7ff fe0b 	bl	80001dc <strlen>
 80005c6:	4603      	mov	r3, r0
 80005c8:	461a      	mov	r2, r3
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	4413      	add	r3, r2
 80005ce:	4905      	ldr	r1, [pc, #20]	@ (80005e4 <keypadPress+0x3cc>)
 80005d0:	461a      	mov	r2, r3
 80005d2:	460b      	mov	r3, r1
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	8013      	strh	r3, [r2, #0]
	}
	return state;
 80005d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	08001310 	.word	0x08001310

080005e8 <main>:

int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	@ 0x28
 80005ec:	af00      	add	r7, sp, #0
	/*
	 * Setting the address of registers
	 */
	RCC_AHB1ENR_t *pClkCtrlReg = (RCC_AHB1ENR_t *) 0x40023830;
 80005ee:	4b4e      	ldr	r3, [pc, #312]	@ (8000728 <main+0x140>)
 80005f0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIOx_MODER_t *pPortDModeReg = (GPIOx_MODER_t *) 0x40020C00;
 80005f2:	4b4e      	ldr	r3, [pc, #312]	@ (800072c <main+0x144>)
 80005f4:	623b      	str	r3, [r7, #32]
	GPIOx_PUPDR_t *pPortDPUPDReg = (GPIOx_PUPDR_t *) 0x40020C0C;
 80005f6:	4b4e      	ldr	r3, [pc, #312]	@ (8000730 <main+0x148>)
 80005f8:	61fb      	str	r3, [r7, #28]
	GPIOx_IDR_t *pPortDInReg = (GPIOx_IDR_t *) 0x40020C10;
 80005fa:	4b4e      	ldr	r3, [pc, #312]	@ (8000734 <main+0x14c>)
 80005fc:	61bb      	str	r3, [r7, #24]
	GPIOx_ODR_t *pPortDOutReg = (GPIOx_ODR_t *) 0x40020C14;
 80005fe:	4b4e      	ldr	r3, [pc, #312]	@ (8000738 <main+0x150>)
 8000600:	617b      	str	r3, [r7, #20]

	// 1. Enable GPIOD clock register
	pClkCtrlReg->gpiod_en = 1;
 8000602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000604:	7813      	ldrb	r3, [r2, #0]
 8000606:	f043 0308 	orr.w	r3, r3, #8
 800060a:	7013      	strb	r3, [r2, #0]

	// 2. Configure PD0, PD1, PD2, PD3 as output (rows)
	pPortDModeReg->pin_0 = 0;
 800060c:	6a3a      	ldr	r2, [r7, #32]
 800060e:	7813      	ldrb	r3, [r2, #0]
 8000610:	f36f 0301 	bfc	r3, #0, #2
 8000614:	7013      	strb	r3, [r2, #0]
	pPortDModeReg->pin_1 = 0;
 8000616:	6a3a      	ldr	r2, [r7, #32]
 8000618:	7813      	ldrb	r3, [r2, #0]
 800061a:	f36f 0383 	bfc	r3, #2, #2
 800061e:	7013      	strb	r3, [r2, #0]
	pPortDModeReg->pin_2 = 0;
 8000620:	6a3a      	ldr	r2, [r7, #32]
 8000622:	7813      	ldrb	r3, [r2, #0]
 8000624:	f36f 1305 	bfc	r3, #4, #2
 8000628:	7013      	strb	r3, [r2, #0]
	pPortDModeReg->pin_3 = 0;
 800062a:	6a3a      	ldr	r2, [r7, #32]
 800062c:	7813      	ldrb	r3, [r2, #0]
 800062e:	f36f 1387 	bfc	r3, #6, #2
 8000632:	7013      	strb	r3, [r2, #0]

	pPortDModeReg->pin_0 = 0x01;
 8000634:	6a3a      	ldr	r2, [r7, #32]
 8000636:	7813      	ldrb	r3, [r2, #0]
 8000638:	2101      	movs	r1, #1
 800063a:	f361 0301 	bfi	r3, r1, #0, #2
 800063e:	7013      	strb	r3, [r2, #0]
	pPortDModeReg->pin_1 = 0x01;
 8000640:	6a3a      	ldr	r2, [r7, #32]
 8000642:	7813      	ldrb	r3, [r2, #0]
 8000644:	2101      	movs	r1, #1
 8000646:	f361 0383 	bfi	r3, r1, #2, #2
 800064a:	7013      	strb	r3, [r2, #0]
	pPortDModeReg->pin_2 = 0x01;
 800064c:	6a3a      	ldr	r2, [r7, #32]
 800064e:	7813      	ldrb	r3, [r2, #0]
 8000650:	2101      	movs	r1, #1
 8000652:	f361 1305 	bfi	r3, r1, #4, #2
 8000656:	7013      	strb	r3, [r2, #0]
	pPortDModeReg->pin_3 = 0x01;
 8000658:	6a3a      	ldr	r2, [r7, #32]
 800065a:	7813      	ldrb	r3, [r2, #0]
 800065c:	2101      	movs	r1, #1
 800065e:	f361 1387 	bfi	r3, r1, #6, #2
 8000662:	7013      	strb	r3, [r2, #0]

	// 3. Configure PD8, PD9, PD10, PD11 as input (cols)
	pPortDModeReg->pin_8 = 0;
 8000664:	6a3a      	ldr	r2, [r7, #32]
 8000666:	7893      	ldrb	r3, [r2, #2]
 8000668:	f36f 0301 	bfc	r3, #0, #2
 800066c:	7093      	strb	r3, [r2, #2]
	pPortDModeReg->pin_9 = 0;
 800066e:	6a3a      	ldr	r2, [r7, #32]
 8000670:	7893      	ldrb	r3, [r2, #2]
 8000672:	f36f 0383 	bfc	r3, #2, #2
 8000676:	7093      	strb	r3, [r2, #2]
	pPortDModeReg->pin_10 = 0;
 8000678:	6a3a      	ldr	r2, [r7, #32]
 800067a:	7893      	ldrb	r3, [r2, #2]
 800067c:	f36f 1305 	bfc	r3, #4, #2
 8000680:	7093      	strb	r3, [r2, #2]
	pPortDModeReg->pin_11 = 0;
 8000682:	6a3a      	ldr	r2, [r7, #32]
 8000684:	7893      	ldrb	r3, [r2, #2]
 8000686:	f36f 1387 	bfc	r3, #6, #2
 800068a:	7093      	strb	r3, [r2, #2]

	// 4. Enable internal pull-up registers for PD8, PD9, PD10, PD11
	pPortDPUPDReg->pin_8 = 0;
 800068c:	69fa      	ldr	r2, [r7, #28]
 800068e:	7893      	ldrb	r3, [r2, #2]
 8000690:	f36f 0301 	bfc	r3, #0, #2
 8000694:	7093      	strb	r3, [r2, #2]
	pPortDPUPDReg->pin_9 = 0;
 8000696:	69fa      	ldr	r2, [r7, #28]
 8000698:	7893      	ldrb	r3, [r2, #2]
 800069a:	f36f 0383 	bfc	r3, #2, #2
 800069e:	7093      	strb	r3, [r2, #2]
	pPortDPUPDReg->pin_10 = 0;
 80006a0:	69fa      	ldr	r2, [r7, #28]
 80006a2:	7893      	ldrb	r3, [r2, #2]
 80006a4:	f36f 1305 	bfc	r3, #4, #2
 80006a8:	7093      	strb	r3, [r2, #2]
	pPortDPUPDReg->pin_11 = 0;
 80006aa:	69fa      	ldr	r2, [r7, #28]
 80006ac:	7893      	ldrb	r3, [r2, #2]
 80006ae:	f36f 1387 	bfc	r3, #6, #2
 80006b2:	7093      	strb	r3, [r2, #2]

	pPortDPUPDReg->pin_8 = 0x01;
 80006b4:	69fa      	ldr	r2, [r7, #28]
 80006b6:	7893      	ldrb	r3, [r2, #2]
 80006b8:	2101      	movs	r1, #1
 80006ba:	f361 0301 	bfi	r3, r1, #0, #2
 80006be:	7093      	strb	r3, [r2, #2]
	pPortDPUPDReg->pin_9 = 0x01;
 80006c0:	69fa      	ldr	r2, [r7, #28]
 80006c2:	7893      	ldrb	r3, [r2, #2]
 80006c4:	2101      	movs	r1, #1
 80006c6:	f361 0383 	bfi	r3, r1, #2, #2
 80006ca:	7093      	strb	r3, [r2, #2]
	pPortDPUPDReg->pin_10 = 0x01;
 80006cc:	69fa      	ldr	r2, [r7, #28]
 80006ce:	7893      	ldrb	r3, [r2, #2]
 80006d0:	2101      	movs	r1, #1
 80006d2:	f361 1305 	bfi	r3, r1, #4, #2
 80006d6:	7093      	strb	r3, [r2, #2]
	pPortDPUPDReg->pin_11 = 0x01;
 80006d8:	69fa      	ldr	r2, [r7, #28]
 80006da:	7893      	ldrb	r3, [r2, #2]
 80006dc:	2101      	movs	r1, #1
 80006de:	f361 1387 	bfi	r3, r1, #6, #2
 80006e2:	7093      	strb	r3, [r2, #2]

	char password[5] = "1234";
 80006e4:	4a15      	ldr	r2, [pc, #84]	@ (800073c <main+0x154>)
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ee:	6018      	str	r0, [r3, #0]
 80006f0:	3304      	adds	r3, #4
 80006f2:	7019      	strb	r1, [r3, #0]
	char temp[5] = "";
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	2300      	movs	r3, #0
 80006fa:	723b      	strb	r3, [r7, #8]
	printf("Enter password to unlock (press # to exit): \n");
 80006fc:	4810      	ldr	r0, [pc, #64]	@ (8000740 <main+0x158>)
 80006fe:	f000 fa31 	bl	8000b64 <puts>
	while(1){
			uint8_t state = keypadPress(pPortDInReg, pPortDOutReg, password, temp);
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	f107 020c 	add.w	r2, r7, #12
 8000708:	6979      	ldr	r1, [r7, #20]
 800070a:	69b8      	ldr	r0, [r7, #24]
 800070c:	f7ff fd84 	bl	8000218 <keypadPress>
 8000710:	4603      	mov	r3, r0
 8000712:	74fb      	strb	r3, [r7, #19]
			if(state == 0){
 8000714:	7cfb      	ldrb	r3, [r7, #19]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d1f3      	bne.n	8000702 <main+0x11a>
				printf("Correct password\n");
 800071a:	480a      	ldr	r0, [pc, #40]	@ (8000744 <main+0x15c>)
 800071c:	f000 fa22 	bl	8000b64 <puts>
				strcpy(temp, "");
 8000720:	2300      	movs	r3, #0
 8000722:	713b      	strb	r3, [r7, #4]
	while(1){
 8000724:	e7ed      	b.n	8000702 <main+0x11a>
 8000726:	bf00      	nop
 8000728:	40023830 	.word	0x40023830
 800072c:	40020c00 	.word	0x40020c00
 8000730:	40020c0c 	.word	0x40020c0c
 8000734:	40020c10 	.word	0x40020c10
 8000738:	40020c14 	.word	0x40020c14
 800073c:	08001358 	.word	0x08001358
 8000740:	08001314 	.word	0x08001314
 8000744:	08001344 	.word	0x08001344

08000748 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000752:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <ITM_SendChar+0x48>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a0e      	ldr	r2, [pc, #56]	@ (8000790 <ITM_SendChar+0x48>)
 8000758:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800075c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800075e:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <ITM_SendChar+0x4c>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a0c      	ldr	r2, [pc, #48]	@ (8000794 <ITM_SendChar+0x4c>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800076a:	bf00      	nop
 800076c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	2b00      	cmp	r3, #0
 8000778:	d0f8      	beq.n	800076c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800077a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	6013      	str	r3, [r2, #0]
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	e000edfc 	.word	0xe000edfc
 8000794:	e0000e00 	.word	0xe0000e00

08000798 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	e00a      	b.n	80007c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007aa:	f3af 8000 	nop.w
 80007ae:	4601      	mov	r1, r0
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	1c5a      	adds	r2, r3, #1
 80007b4:	60ba      	str	r2, [r7, #8]
 80007b6:	b2ca      	uxtb	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	3301      	adds	r3, #1
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	dbf0      	blt.n	80007aa <_read+0x12>
  }

  return len;
 80007c8:	687b      	ldr	r3, [r7, #4]
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b086      	sub	sp, #24
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	60f8      	str	r0, [r7, #12]
 80007da:	60b9      	str	r1, [r7, #8]
 80007dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	e009      	b.n	80007f8 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	1c5a      	adds	r2, r3, #1
 80007e8:	60ba      	str	r2, [r7, #8]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ffab 	bl	8000748 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	3301      	adds	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697a      	ldr	r2, [r7, #20]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	dbf1      	blt.n	80007e4 <_write+0x12>
  }
  return len;
 8000800:	687b      	ldr	r3, [r7, #4]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <_close>:

int _close(int file)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000812:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000816:	4618      	mov	r0, r3
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
 800082a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000832:	605a      	str	r2, [r3, #4]
  return 0;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <_isatty>:

int _isatty(int file)
{
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800084a:	2301      	movs	r3, #1
}
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
	...

08000874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800087c:	4a14      	ldr	r2, [pc, #80]	@ (80008d0 <_sbrk+0x5c>)
 800087e:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <_sbrk+0x60>)
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000888:	4b13      	ldr	r3, [pc, #76]	@ (80008d8 <_sbrk+0x64>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d102      	bne.n	8000896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000890:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <_sbrk+0x64>)
 8000892:	4a12      	ldr	r2, [pc, #72]	@ (80008dc <_sbrk+0x68>)
 8000894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000896:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <_sbrk+0x64>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d207      	bcs.n	80008b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a4:	f000 fa8c 	bl	8000dc0 <__errno>
 80008a8:	4603      	mov	r3, r0
 80008aa:	220c      	movs	r2, #12
 80008ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008b2:	e009      	b.n	80008c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b4:	4b08      	ldr	r3, [pc, #32]	@ (80008d8 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ba:	4b07      	ldr	r3, [pc, #28]	@ (80008d8 <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	4a05      	ldr	r2, [pc, #20]	@ (80008d8 <_sbrk+0x64>)
 80008c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20020000 	.word	0x20020000
 80008d4:	00000400 	.word	0x00000400
 80008d8:	20000078 	.word	0x20000078
 80008dc:	200001c8 	.word	0x200001c8

080008e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008e0:	480d      	ldr	r0, [pc, #52]	@ (8000918 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e8:	480c      	ldr	r0, [pc, #48]	@ (800091c <LoopForever+0x6>)
  ldr r1, =_edata
 80008ea:	490d      	ldr	r1, [pc, #52]	@ (8000920 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000924 <LoopForever+0xe>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f0:	e002      	b.n	80008f8 <LoopCopyDataInit>

080008f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f6:	3304      	adds	r3, #4

080008f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008fc:	d3f9      	bcc.n	80008f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000900:	4c0a      	ldr	r4, [pc, #40]	@ (800092c <LoopForever+0x16>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000904:	e001      	b.n	800090a <LoopFillZerobss>

08000906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000908:	3204      	adds	r2, #4

0800090a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800090c:	d3fb      	bcc.n	8000906 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800090e:	f000 fa5d 	bl	8000dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000912:	f7ff fe69 	bl	80005e8 <main>

08000916 <LoopForever>:

LoopForever:
  b LoopForever
 8000916:	e7fe      	b.n	8000916 <LoopForever>
  ldr   r0, =_estack
 8000918:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800091c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000920:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000924:	08001370 	.word	0x08001370
  ldr r2, =_sbss
 8000928:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800092c:	200001c8 	.word	0x200001c8

08000930 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000930:	e7fe      	b.n	8000930 <ADC_IRQHandler>
	...

08000934 <std>:
 8000934:	2300      	movs	r3, #0
 8000936:	b510      	push	{r4, lr}
 8000938:	4604      	mov	r4, r0
 800093a:	e9c0 3300 	strd	r3, r3, [r0]
 800093e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000942:	6083      	str	r3, [r0, #8]
 8000944:	8181      	strh	r1, [r0, #12]
 8000946:	6643      	str	r3, [r0, #100]	@ 0x64
 8000948:	81c2      	strh	r2, [r0, #14]
 800094a:	6183      	str	r3, [r0, #24]
 800094c:	4619      	mov	r1, r3
 800094e:	2208      	movs	r2, #8
 8000950:	305c      	adds	r0, #92	@ 0x5c
 8000952:	f000 f9e7 	bl	8000d24 <memset>
 8000956:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <std+0x58>)
 8000958:	6263      	str	r3, [r4, #36]	@ 0x24
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <std+0x5c>)
 800095c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <std+0x60>)
 8000960:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000962:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <std+0x64>)
 8000964:	6323      	str	r3, [r4, #48]	@ 0x30
 8000966:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <std+0x68>)
 8000968:	6224      	str	r4, [r4, #32]
 800096a:	429c      	cmp	r4, r3
 800096c:	d006      	beq.n	800097c <std+0x48>
 800096e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000972:	4294      	cmp	r4, r2
 8000974:	d002      	beq.n	800097c <std+0x48>
 8000976:	33d0      	adds	r3, #208	@ 0xd0
 8000978:	429c      	cmp	r4, r3
 800097a:	d105      	bne.n	8000988 <std+0x54>
 800097c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000984:	f000 ba46 	b.w	8000e14 <__retarget_lock_init_recursive>
 8000988:	bd10      	pop	{r4, pc}
 800098a:	bf00      	nop
 800098c:	08000b75 	.word	0x08000b75
 8000990:	08000b97 	.word	0x08000b97
 8000994:	08000bcf 	.word	0x08000bcf
 8000998:	08000bf3 	.word	0x08000bf3
 800099c:	2000007c 	.word	0x2000007c

080009a0 <stdio_exit_handler>:
 80009a0:	4a02      	ldr	r2, [pc, #8]	@ (80009ac <stdio_exit_handler+0xc>)
 80009a2:	4903      	ldr	r1, [pc, #12]	@ (80009b0 <stdio_exit_handler+0x10>)
 80009a4:	4803      	ldr	r0, [pc, #12]	@ (80009b4 <stdio_exit_handler+0x14>)
 80009a6:	f000 b869 	b.w	8000a7c <_fwalk_sglue>
 80009aa:	bf00      	nop
 80009ac:	20000000 	.word	0x20000000
 80009b0:	08001115 	.word	0x08001115
 80009b4:	20000010 	.word	0x20000010

080009b8 <cleanup_stdio>:
 80009b8:	6841      	ldr	r1, [r0, #4]
 80009ba:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <cleanup_stdio+0x34>)
 80009bc:	4299      	cmp	r1, r3
 80009be:	b510      	push	{r4, lr}
 80009c0:	4604      	mov	r4, r0
 80009c2:	d001      	beq.n	80009c8 <cleanup_stdio+0x10>
 80009c4:	f000 fba6 	bl	8001114 <_fflush_r>
 80009c8:	68a1      	ldr	r1, [r4, #8]
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <cleanup_stdio+0x38>)
 80009cc:	4299      	cmp	r1, r3
 80009ce:	d002      	beq.n	80009d6 <cleanup_stdio+0x1e>
 80009d0:	4620      	mov	r0, r4
 80009d2:	f000 fb9f 	bl	8001114 <_fflush_r>
 80009d6:	68e1      	ldr	r1, [r4, #12]
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <cleanup_stdio+0x3c>)
 80009da:	4299      	cmp	r1, r3
 80009dc:	d004      	beq.n	80009e8 <cleanup_stdio+0x30>
 80009de:	4620      	mov	r0, r4
 80009e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009e4:	f000 bb96 	b.w	8001114 <_fflush_r>
 80009e8:	bd10      	pop	{r4, pc}
 80009ea:	bf00      	nop
 80009ec:	2000007c 	.word	0x2000007c
 80009f0:	200000e4 	.word	0x200000e4
 80009f4:	2000014c 	.word	0x2000014c

080009f8 <global_stdio_init.part.0>:
 80009f8:	b510      	push	{r4, lr}
 80009fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <global_stdio_init.part.0+0x30>)
 80009fc:	4c0b      	ldr	r4, [pc, #44]	@ (8000a2c <global_stdio_init.part.0+0x34>)
 80009fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000a30 <global_stdio_init.part.0+0x38>)
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	4620      	mov	r0, r4
 8000a04:	2200      	movs	r2, #0
 8000a06:	2104      	movs	r1, #4
 8000a08:	f7ff ff94 	bl	8000934 <std>
 8000a0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000a10:	2201      	movs	r2, #1
 8000a12:	2109      	movs	r1, #9
 8000a14:	f7ff ff8e 	bl	8000934 <std>
 8000a18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a22:	2112      	movs	r1, #18
 8000a24:	f7ff bf86 	b.w	8000934 <std>
 8000a28:	200001b4 	.word	0x200001b4
 8000a2c:	2000007c 	.word	0x2000007c
 8000a30:	080009a1 	.word	0x080009a1

08000a34 <__sfp_lock_acquire>:
 8000a34:	4801      	ldr	r0, [pc, #4]	@ (8000a3c <__sfp_lock_acquire+0x8>)
 8000a36:	f000 b9ee 	b.w	8000e16 <__retarget_lock_acquire_recursive>
 8000a3a:	bf00      	nop
 8000a3c:	200001bd 	.word	0x200001bd

08000a40 <__sfp_lock_release>:
 8000a40:	4801      	ldr	r0, [pc, #4]	@ (8000a48 <__sfp_lock_release+0x8>)
 8000a42:	f000 b9e9 	b.w	8000e18 <__retarget_lock_release_recursive>
 8000a46:	bf00      	nop
 8000a48:	200001bd 	.word	0x200001bd

08000a4c <__sinit>:
 8000a4c:	b510      	push	{r4, lr}
 8000a4e:	4604      	mov	r4, r0
 8000a50:	f7ff fff0 	bl	8000a34 <__sfp_lock_acquire>
 8000a54:	6a23      	ldr	r3, [r4, #32]
 8000a56:	b11b      	cbz	r3, 8000a60 <__sinit+0x14>
 8000a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a5c:	f7ff bff0 	b.w	8000a40 <__sfp_lock_release>
 8000a60:	4b04      	ldr	r3, [pc, #16]	@ (8000a74 <__sinit+0x28>)
 8000a62:	6223      	str	r3, [r4, #32]
 8000a64:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <__sinit+0x2c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1f5      	bne.n	8000a58 <__sinit+0xc>
 8000a6c:	f7ff ffc4 	bl	80009f8 <global_stdio_init.part.0>
 8000a70:	e7f2      	b.n	8000a58 <__sinit+0xc>
 8000a72:	bf00      	nop
 8000a74:	080009b9 	.word	0x080009b9
 8000a78:	200001b4 	.word	0x200001b4

08000a7c <_fwalk_sglue>:
 8000a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a80:	4607      	mov	r7, r0
 8000a82:	4688      	mov	r8, r1
 8000a84:	4614      	mov	r4, r2
 8000a86:	2600      	movs	r6, #0
 8000a88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a8c:	f1b9 0901 	subs.w	r9, r9, #1
 8000a90:	d505      	bpl.n	8000a9e <_fwalk_sglue+0x22>
 8000a92:	6824      	ldr	r4, [r4, #0]
 8000a94:	2c00      	cmp	r4, #0
 8000a96:	d1f7      	bne.n	8000a88 <_fwalk_sglue+0xc>
 8000a98:	4630      	mov	r0, r6
 8000a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a9e:	89ab      	ldrh	r3, [r5, #12]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d907      	bls.n	8000ab4 <_fwalk_sglue+0x38>
 8000aa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	d003      	beq.n	8000ab4 <_fwalk_sglue+0x38>
 8000aac:	4629      	mov	r1, r5
 8000aae:	4638      	mov	r0, r7
 8000ab0:	47c0      	blx	r8
 8000ab2:	4306      	orrs	r6, r0
 8000ab4:	3568      	adds	r5, #104	@ 0x68
 8000ab6:	e7e9      	b.n	8000a8c <_fwalk_sglue+0x10>

08000ab8 <_puts_r>:
 8000ab8:	6a03      	ldr	r3, [r0, #32]
 8000aba:	b570      	push	{r4, r5, r6, lr}
 8000abc:	6884      	ldr	r4, [r0, #8]
 8000abe:	4605      	mov	r5, r0
 8000ac0:	460e      	mov	r6, r1
 8000ac2:	b90b      	cbnz	r3, 8000ac8 <_puts_r+0x10>
 8000ac4:	f7ff ffc2 	bl	8000a4c <__sinit>
 8000ac8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000aca:	07db      	lsls	r3, r3, #31
 8000acc:	d405      	bmi.n	8000ada <_puts_r+0x22>
 8000ace:	89a3      	ldrh	r3, [r4, #12]
 8000ad0:	0598      	lsls	r0, r3, #22
 8000ad2:	d402      	bmi.n	8000ada <_puts_r+0x22>
 8000ad4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000ad6:	f000 f99e 	bl	8000e16 <__retarget_lock_acquire_recursive>
 8000ada:	89a3      	ldrh	r3, [r4, #12]
 8000adc:	0719      	lsls	r1, r3, #28
 8000ade:	d502      	bpl.n	8000ae6 <_puts_r+0x2e>
 8000ae0:	6923      	ldr	r3, [r4, #16]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d135      	bne.n	8000b52 <_puts_r+0x9a>
 8000ae6:	4621      	mov	r1, r4
 8000ae8:	4628      	mov	r0, r5
 8000aea:	f000 f8c5 	bl	8000c78 <__swsetup_r>
 8000aee:	b380      	cbz	r0, 8000b52 <_puts_r+0x9a>
 8000af0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000af4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000af6:	07da      	lsls	r2, r3, #31
 8000af8:	d405      	bmi.n	8000b06 <_puts_r+0x4e>
 8000afa:	89a3      	ldrh	r3, [r4, #12]
 8000afc:	059b      	lsls	r3, r3, #22
 8000afe:	d402      	bmi.n	8000b06 <_puts_r+0x4e>
 8000b00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b02:	f000 f989 	bl	8000e18 <__retarget_lock_release_recursive>
 8000b06:	4628      	mov	r0, r5
 8000b08:	bd70      	pop	{r4, r5, r6, pc}
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	da04      	bge.n	8000b18 <_puts_r+0x60>
 8000b0e:	69a2      	ldr	r2, [r4, #24]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	dc17      	bgt.n	8000b44 <_puts_r+0x8c>
 8000b14:	290a      	cmp	r1, #10
 8000b16:	d015      	beq.n	8000b44 <_puts_r+0x8c>
 8000b18:	6823      	ldr	r3, [r4, #0]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	6022      	str	r2, [r4, #0]
 8000b1e:	7019      	strb	r1, [r3, #0]
 8000b20:	68a3      	ldr	r3, [r4, #8]
 8000b22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b26:	3b01      	subs	r3, #1
 8000b28:	60a3      	str	r3, [r4, #8]
 8000b2a:	2900      	cmp	r1, #0
 8000b2c:	d1ed      	bne.n	8000b0a <_puts_r+0x52>
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	da11      	bge.n	8000b56 <_puts_r+0x9e>
 8000b32:	4622      	mov	r2, r4
 8000b34:	210a      	movs	r1, #10
 8000b36:	4628      	mov	r0, r5
 8000b38:	f000 f85f 	bl	8000bfa <__swbuf_r>
 8000b3c:	3001      	adds	r0, #1
 8000b3e:	d0d7      	beq.n	8000af0 <_puts_r+0x38>
 8000b40:	250a      	movs	r5, #10
 8000b42:	e7d7      	b.n	8000af4 <_puts_r+0x3c>
 8000b44:	4622      	mov	r2, r4
 8000b46:	4628      	mov	r0, r5
 8000b48:	f000 f857 	bl	8000bfa <__swbuf_r>
 8000b4c:	3001      	adds	r0, #1
 8000b4e:	d1e7      	bne.n	8000b20 <_puts_r+0x68>
 8000b50:	e7ce      	b.n	8000af0 <_puts_r+0x38>
 8000b52:	3e01      	subs	r6, #1
 8000b54:	e7e4      	b.n	8000b20 <_puts_r+0x68>
 8000b56:	6823      	ldr	r3, [r4, #0]
 8000b58:	1c5a      	adds	r2, r3, #1
 8000b5a:	6022      	str	r2, [r4, #0]
 8000b5c:	220a      	movs	r2, #10
 8000b5e:	701a      	strb	r2, [r3, #0]
 8000b60:	e7ee      	b.n	8000b40 <_puts_r+0x88>
	...

08000b64 <puts>:
 8000b64:	4b02      	ldr	r3, [pc, #8]	@ (8000b70 <puts+0xc>)
 8000b66:	4601      	mov	r1, r0
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	f7ff bfa5 	b.w	8000ab8 <_puts_r>
 8000b6e:	bf00      	nop
 8000b70:	2000000c 	.word	0x2000000c

08000b74 <__sread>:
 8000b74:	b510      	push	{r4, lr}
 8000b76:	460c      	mov	r4, r1
 8000b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b7c:	f000 f8fc 	bl	8000d78 <_read_r>
 8000b80:	2800      	cmp	r0, #0
 8000b82:	bfab      	itete	ge
 8000b84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000b86:	89a3      	ldrhlt	r3, [r4, #12]
 8000b88:	181b      	addge	r3, r3, r0
 8000b8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000b8e:	bfac      	ite	ge
 8000b90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000b92:	81a3      	strhlt	r3, [r4, #12]
 8000b94:	bd10      	pop	{r4, pc}

08000b96 <__swrite>:
 8000b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b9a:	461f      	mov	r7, r3
 8000b9c:	898b      	ldrh	r3, [r1, #12]
 8000b9e:	05db      	lsls	r3, r3, #23
 8000ba0:	4605      	mov	r5, r0
 8000ba2:	460c      	mov	r4, r1
 8000ba4:	4616      	mov	r6, r2
 8000ba6:	d505      	bpl.n	8000bb4 <__swrite+0x1e>
 8000ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bac:	2302      	movs	r3, #2
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f000 f8d0 	bl	8000d54 <_lseek_r>
 8000bb4:	89a3      	ldrh	r3, [r4, #12]
 8000bb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000bbe:	81a3      	strh	r3, [r4, #12]
 8000bc0:	4632      	mov	r2, r6
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4628      	mov	r0, r5
 8000bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000bca:	f000 b8e7 	b.w	8000d9c <_write_r>

08000bce <__sseek>:
 8000bce:	b510      	push	{r4, lr}
 8000bd0:	460c      	mov	r4, r1
 8000bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bd6:	f000 f8bd 	bl	8000d54 <_lseek_r>
 8000bda:	1c43      	adds	r3, r0, #1
 8000bdc:	89a3      	ldrh	r3, [r4, #12]
 8000bde:	bf15      	itete	ne
 8000be0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000be2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000be6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000bea:	81a3      	strheq	r3, [r4, #12]
 8000bec:	bf18      	it	ne
 8000bee:	81a3      	strhne	r3, [r4, #12]
 8000bf0:	bd10      	pop	{r4, pc}

08000bf2 <__sclose>:
 8000bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bf6:	f000 b89d 	b.w	8000d34 <_close_r>

08000bfa <__swbuf_r>:
 8000bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfc:	460e      	mov	r6, r1
 8000bfe:	4614      	mov	r4, r2
 8000c00:	4605      	mov	r5, r0
 8000c02:	b118      	cbz	r0, 8000c0c <__swbuf_r+0x12>
 8000c04:	6a03      	ldr	r3, [r0, #32]
 8000c06:	b90b      	cbnz	r3, 8000c0c <__swbuf_r+0x12>
 8000c08:	f7ff ff20 	bl	8000a4c <__sinit>
 8000c0c:	69a3      	ldr	r3, [r4, #24]
 8000c0e:	60a3      	str	r3, [r4, #8]
 8000c10:	89a3      	ldrh	r3, [r4, #12]
 8000c12:	071a      	lsls	r2, r3, #28
 8000c14:	d501      	bpl.n	8000c1a <__swbuf_r+0x20>
 8000c16:	6923      	ldr	r3, [r4, #16]
 8000c18:	b943      	cbnz	r3, 8000c2c <__swbuf_r+0x32>
 8000c1a:	4621      	mov	r1, r4
 8000c1c:	4628      	mov	r0, r5
 8000c1e:	f000 f82b 	bl	8000c78 <__swsetup_r>
 8000c22:	b118      	cbz	r0, 8000c2c <__swbuf_r+0x32>
 8000c24:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000c28:	4638      	mov	r0, r7
 8000c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c2c:	6823      	ldr	r3, [r4, #0]
 8000c2e:	6922      	ldr	r2, [r4, #16]
 8000c30:	1a98      	subs	r0, r3, r2
 8000c32:	6963      	ldr	r3, [r4, #20]
 8000c34:	b2f6      	uxtb	r6, r6
 8000c36:	4283      	cmp	r3, r0
 8000c38:	4637      	mov	r7, r6
 8000c3a:	dc05      	bgt.n	8000c48 <__swbuf_r+0x4e>
 8000c3c:	4621      	mov	r1, r4
 8000c3e:	4628      	mov	r0, r5
 8000c40:	f000 fa68 	bl	8001114 <_fflush_r>
 8000c44:	2800      	cmp	r0, #0
 8000c46:	d1ed      	bne.n	8000c24 <__swbuf_r+0x2a>
 8000c48:	68a3      	ldr	r3, [r4, #8]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	60a3      	str	r3, [r4, #8]
 8000c4e:	6823      	ldr	r3, [r4, #0]
 8000c50:	1c5a      	adds	r2, r3, #1
 8000c52:	6022      	str	r2, [r4, #0]
 8000c54:	701e      	strb	r6, [r3, #0]
 8000c56:	6962      	ldr	r2, [r4, #20]
 8000c58:	1c43      	adds	r3, r0, #1
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__swbuf_r+0x6e>
 8000c5e:	89a3      	ldrh	r3, [r4, #12]
 8000c60:	07db      	lsls	r3, r3, #31
 8000c62:	d5e1      	bpl.n	8000c28 <__swbuf_r+0x2e>
 8000c64:	2e0a      	cmp	r6, #10
 8000c66:	d1df      	bne.n	8000c28 <__swbuf_r+0x2e>
 8000c68:	4621      	mov	r1, r4
 8000c6a:	4628      	mov	r0, r5
 8000c6c:	f000 fa52 	bl	8001114 <_fflush_r>
 8000c70:	2800      	cmp	r0, #0
 8000c72:	d0d9      	beq.n	8000c28 <__swbuf_r+0x2e>
 8000c74:	e7d6      	b.n	8000c24 <__swbuf_r+0x2a>
	...

08000c78 <__swsetup_r>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	4b29      	ldr	r3, [pc, #164]	@ (8000d20 <__swsetup_r+0xa8>)
 8000c7c:	4605      	mov	r5, r0
 8000c7e:	6818      	ldr	r0, [r3, #0]
 8000c80:	460c      	mov	r4, r1
 8000c82:	b118      	cbz	r0, 8000c8c <__swsetup_r+0x14>
 8000c84:	6a03      	ldr	r3, [r0, #32]
 8000c86:	b90b      	cbnz	r3, 8000c8c <__swsetup_r+0x14>
 8000c88:	f7ff fee0 	bl	8000a4c <__sinit>
 8000c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c90:	0719      	lsls	r1, r3, #28
 8000c92:	d422      	bmi.n	8000cda <__swsetup_r+0x62>
 8000c94:	06da      	lsls	r2, r3, #27
 8000c96:	d407      	bmi.n	8000ca8 <__swsetup_r+0x30>
 8000c98:	2209      	movs	r2, #9
 8000c9a:	602a      	str	r2, [r5, #0]
 8000c9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ca0:	81a3      	strh	r3, [r4, #12]
 8000ca2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ca6:	e033      	b.n	8000d10 <__swsetup_r+0x98>
 8000ca8:	0758      	lsls	r0, r3, #29
 8000caa:	d512      	bpl.n	8000cd2 <__swsetup_r+0x5a>
 8000cac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000cae:	b141      	cbz	r1, 8000cc2 <__swsetup_r+0x4a>
 8000cb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	d002      	beq.n	8000cbe <__swsetup_r+0x46>
 8000cb8:	4628      	mov	r0, r5
 8000cba:	f000 f8af 	bl	8000e1c <_free_r>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8000cc2:	89a3      	ldrh	r3, [r4, #12]
 8000cc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000cc8:	81a3      	strh	r3, [r4, #12]
 8000cca:	2300      	movs	r3, #0
 8000ccc:	6063      	str	r3, [r4, #4]
 8000cce:	6923      	ldr	r3, [r4, #16]
 8000cd0:	6023      	str	r3, [r4, #0]
 8000cd2:	89a3      	ldrh	r3, [r4, #12]
 8000cd4:	f043 0308 	orr.w	r3, r3, #8
 8000cd8:	81a3      	strh	r3, [r4, #12]
 8000cda:	6923      	ldr	r3, [r4, #16]
 8000cdc:	b94b      	cbnz	r3, 8000cf2 <__swsetup_r+0x7a>
 8000cde:	89a3      	ldrh	r3, [r4, #12]
 8000ce0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000ce4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ce8:	d003      	beq.n	8000cf2 <__swsetup_r+0x7a>
 8000cea:	4621      	mov	r1, r4
 8000cec:	4628      	mov	r0, r5
 8000cee:	f000 fa5f 	bl	80011b0 <__smakebuf_r>
 8000cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cf6:	f013 0201 	ands.w	r2, r3, #1
 8000cfa:	d00a      	beq.n	8000d12 <__swsetup_r+0x9a>
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	60a2      	str	r2, [r4, #8]
 8000d00:	6962      	ldr	r2, [r4, #20]
 8000d02:	4252      	negs	r2, r2
 8000d04:	61a2      	str	r2, [r4, #24]
 8000d06:	6922      	ldr	r2, [r4, #16]
 8000d08:	b942      	cbnz	r2, 8000d1c <__swsetup_r+0xa4>
 8000d0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000d0e:	d1c5      	bne.n	8000c9c <__swsetup_r+0x24>
 8000d10:	bd38      	pop	{r3, r4, r5, pc}
 8000d12:	0799      	lsls	r1, r3, #30
 8000d14:	bf58      	it	pl
 8000d16:	6962      	ldrpl	r2, [r4, #20]
 8000d18:	60a2      	str	r2, [r4, #8]
 8000d1a:	e7f4      	b.n	8000d06 <__swsetup_r+0x8e>
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	e7f7      	b.n	8000d10 <__swsetup_r+0x98>
 8000d20:	2000000c 	.word	0x2000000c

08000d24 <memset>:
 8000d24:	4402      	add	r2, r0
 8000d26:	4603      	mov	r3, r0
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d100      	bne.n	8000d2e <memset+0xa>
 8000d2c:	4770      	bx	lr
 8000d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8000d32:	e7f9      	b.n	8000d28 <memset+0x4>

08000d34 <_close_r>:
 8000d34:	b538      	push	{r3, r4, r5, lr}
 8000d36:	4d06      	ldr	r5, [pc, #24]	@ (8000d50 <_close_r+0x1c>)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	602b      	str	r3, [r5, #0]
 8000d40:	f7ff fd63 	bl	800080a <_close>
 8000d44:	1c43      	adds	r3, r0, #1
 8000d46:	d102      	bne.n	8000d4e <_close_r+0x1a>
 8000d48:	682b      	ldr	r3, [r5, #0]
 8000d4a:	b103      	cbz	r3, 8000d4e <_close_r+0x1a>
 8000d4c:	6023      	str	r3, [r4, #0]
 8000d4e:	bd38      	pop	{r3, r4, r5, pc}
 8000d50:	200001b8 	.word	0x200001b8

08000d54 <_lseek_r>:
 8000d54:	b538      	push	{r3, r4, r5, lr}
 8000d56:	4d07      	ldr	r5, [pc, #28]	@ (8000d74 <_lseek_r+0x20>)
 8000d58:	4604      	mov	r4, r0
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	2200      	movs	r2, #0
 8000d60:	602a      	str	r2, [r5, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	f7ff fd78 	bl	8000858 <_lseek>
 8000d68:	1c43      	adds	r3, r0, #1
 8000d6a:	d102      	bne.n	8000d72 <_lseek_r+0x1e>
 8000d6c:	682b      	ldr	r3, [r5, #0]
 8000d6e:	b103      	cbz	r3, 8000d72 <_lseek_r+0x1e>
 8000d70:	6023      	str	r3, [r4, #0]
 8000d72:	bd38      	pop	{r3, r4, r5, pc}
 8000d74:	200001b8 	.word	0x200001b8

08000d78 <_read_r>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	4d07      	ldr	r5, [pc, #28]	@ (8000d98 <_read_r+0x20>)
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	4611      	mov	r1, r2
 8000d82:	2200      	movs	r2, #0
 8000d84:	602a      	str	r2, [r5, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	f7ff fd06 	bl	8000798 <_read>
 8000d8c:	1c43      	adds	r3, r0, #1
 8000d8e:	d102      	bne.n	8000d96 <_read_r+0x1e>
 8000d90:	682b      	ldr	r3, [r5, #0]
 8000d92:	b103      	cbz	r3, 8000d96 <_read_r+0x1e>
 8000d94:	6023      	str	r3, [r4, #0]
 8000d96:	bd38      	pop	{r3, r4, r5, pc}
 8000d98:	200001b8 	.word	0x200001b8

08000d9c <_write_r>:
 8000d9c:	b538      	push	{r3, r4, r5, lr}
 8000d9e:	4d07      	ldr	r5, [pc, #28]	@ (8000dbc <_write_r+0x20>)
 8000da0:	4604      	mov	r4, r0
 8000da2:	4608      	mov	r0, r1
 8000da4:	4611      	mov	r1, r2
 8000da6:	2200      	movs	r2, #0
 8000da8:	602a      	str	r2, [r5, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	f7ff fd11 	bl	80007d2 <_write>
 8000db0:	1c43      	adds	r3, r0, #1
 8000db2:	d102      	bne.n	8000dba <_write_r+0x1e>
 8000db4:	682b      	ldr	r3, [r5, #0]
 8000db6:	b103      	cbz	r3, 8000dba <_write_r+0x1e>
 8000db8:	6023      	str	r3, [r4, #0]
 8000dba:	bd38      	pop	{r3, r4, r5, pc}
 8000dbc:	200001b8 	.word	0x200001b8

08000dc0 <__errno>:
 8000dc0:	4b01      	ldr	r3, [pc, #4]	@ (8000dc8 <__errno+0x8>)
 8000dc2:	6818      	ldr	r0, [r3, #0]
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	2000000c 	.word	0x2000000c

08000dcc <__libc_init_array>:
 8000dcc:	b570      	push	{r4, r5, r6, lr}
 8000dce:	4d0d      	ldr	r5, [pc, #52]	@ (8000e04 <__libc_init_array+0x38>)
 8000dd0:	4c0d      	ldr	r4, [pc, #52]	@ (8000e08 <__libc_init_array+0x3c>)
 8000dd2:	1b64      	subs	r4, r4, r5
 8000dd4:	10a4      	asrs	r4, r4, #2
 8000dd6:	2600      	movs	r6, #0
 8000dd8:	42a6      	cmp	r6, r4
 8000dda:	d109      	bne.n	8000df0 <__libc_init_array+0x24>
 8000ddc:	4d0b      	ldr	r5, [pc, #44]	@ (8000e0c <__libc_init_array+0x40>)
 8000dde:	4c0c      	ldr	r4, [pc, #48]	@ (8000e10 <__libc_init_array+0x44>)
 8000de0:	f000 fa54 	bl	800128c <_init>
 8000de4:	1b64      	subs	r4, r4, r5
 8000de6:	10a4      	asrs	r4, r4, #2
 8000de8:	2600      	movs	r6, #0
 8000dea:	42a6      	cmp	r6, r4
 8000dec:	d105      	bne.n	8000dfa <__libc_init_array+0x2e>
 8000dee:	bd70      	pop	{r4, r5, r6, pc}
 8000df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000df4:	4798      	blx	r3
 8000df6:	3601      	adds	r6, #1
 8000df8:	e7ee      	b.n	8000dd8 <__libc_init_array+0xc>
 8000dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dfe:	4798      	blx	r3
 8000e00:	3601      	adds	r6, #1
 8000e02:	e7f2      	b.n	8000dea <__libc_init_array+0x1e>
 8000e04:	08001368 	.word	0x08001368
 8000e08:	08001368 	.word	0x08001368
 8000e0c:	08001368 	.word	0x08001368
 8000e10:	0800136c 	.word	0x0800136c

08000e14 <__retarget_lock_init_recursive>:
 8000e14:	4770      	bx	lr

08000e16 <__retarget_lock_acquire_recursive>:
 8000e16:	4770      	bx	lr

08000e18 <__retarget_lock_release_recursive>:
 8000e18:	4770      	bx	lr
	...

08000e1c <_free_r>:
 8000e1c:	b538      	push	{r3, r4, r5, lr}
 8000e1e:	4605      	mov	r5, r0
 8000e20:	2900      	cmp	r1, #0
 8000e22:	d041      	beq.n	8000ea8 <_free_r+0x8c>
 8000e24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e28:	1f0c      	subs	r4, r1, #4
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	bfb8      	it	lt
 8000e2e:	18e4      	addlt	r4, r4, r3
 8000e30:	f000 f8e0 	bl	8000ff4 <__malloc_lock>
 8000e34:	4a1d      	ldr	r2, [pc, #116]	@ (8000eac <_free_r+0x90>)
 8000e36:	6813      	ldr	r3, [r2, #0]
 8000e38:	b933      	cbnz	r3, 8000e48 <_free_r+0x2c>
 8000e3a:	6063      	str	r3, [r4, #4]
 8000e3c:	6014      	str	r4, [r2, #0]
 8000e3e:	4628      	mov	r0, r5
 8000e40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e44:	f000 b8dc 	b.w	8001000 <__malloc_unlock>
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <_free_r+0x42>
 8000e4c:	6820      	ldr	r0, [r4, #0]
 8000e4e:	1821      	adds	r1, r4, r0
 8000e50:	428b      	cmp	r3, r1
 8000e52:	bf01      	itttt	eq
 8000e54:	6819      	ldreq	r1, [r3, #0]
 8000e56:	685b      	ldreq	r3, [r3, #4]
 8000e58:	1809      	addeq	r1, r1, r0
 8000e5a:	6021      	streq	r1, [r4, #0]
 8000e5c:	e7ed      	b.n	8000e3a <_free_r+0x1e>
 8000e5e:	461a      	mov	r2, r3
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	b10b      	cbz	r3, 8000e68 <_free_r+0x4c>
 8000e64:	42a3      	cmp	r3, r4
 8000e66:	d9fa      	bls.n	8000e5e <_free_r+0x42>
 8000e68:	6811      	ldr	r1, [r2, #0]
 8000e6a:	1850      	adds	r0, r2, r1
 8000e6c:	42a0      	cmp	r0, r4
 8000e6e:	d10b      	bne.n	8000e88 <_free_r+0x6c>
 8000e70:	6820      	ldr	r0, [r4, #0]
 8000e72:	4401      	add	r1, r0
 8000e74:	1850      	adds	r0, r2, r1
 8000e76:	4283      	cmp	r3, r0
 8000e78:	6011      	str	r1, [r2, #0]
 8000e7a:	d1e0      	bne.n	8000e3e <_free_r+0x22>
 8000e7c:	6818      	ldr	r0, [r3, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	6053      	str	r3, [r2, #4]
 8000e82:	4408      	add	r0, r1
 8000e84:	6010      	str	r0, [r2, #0]
 8000e86:	e7da      	b.n	8000e3e <_free_r+0x22>
 8000e88:	d902      	bls.n	8000e90 <_free_r+0x74>
 8000e8a:	230c      	movs	r3, #12
 8000e8c:	602b      	str	r3, [r5, #0]
 8000e8e:	e7d6      	b.n	8000e3e <_free_r+0x22>
 8000e90:	6820      	ldr	r0, [r4, #0]
 8000e92:	1821      	adds	r1, r4, r0
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf04      	itt	eq
 8000e98:	6819      	ldreq	r1, [r3, #0]
 8000e9a:	685b      	ldreq	r3, [r3, #4]
 8000e9c:	6063      	str	r3, [r4, #4]
 8000e9e:	bf04      	itt	eq
 8000ea0:	1809      	addeq	r1, r1, r0
 8000ea2:	6021      	streq	r1, [r4, #0]
 8000ea4:	6054      	str	r4, [r2, #4]
 8000ea6:	e7ca      	b.n	8000e3e <_free_r+0x22>
 8000ea8:	bd38      	pop	{r3, r4, r5, pc}
 8000eaa:	bf00      	nop
 8000eac:	200001c4 	.word	0x200001c4

08000eb0 <sbrk_aligned>:
 8000eb0:	b570      	push	{r4, r5, r6, lr}
 8000eb2:	4e0f      	ldr	r6, [pc, #60]	@ (8000ef0 <sbrk_aligned+0x40>)
 8000eb4:	460c      	mov	r4, r1
 8000eb6:	6831      	ldr	r1, [r6, #0]
 8000eb8:	4605      	mov	r5, r0
 8000eba:	b911      	cbnz	r1, 8000ec2 <sbrk_aligned+0x12>
 8000ebc:	f000 f9d6 	bl	800126c <_sbrk_r>
 8000ec0:	6030      	str	r0, [r6, #0]
 8000ec2:	4621      	mov	r1, r4
 8000ec4:	4628      	mov	r0, r5
 8000ec6:	f000 f9d1 	bl	800126c <_sbrk_r>
 8000eca:	1c43      	adds	r3, r0, #1
 8000ecc:	d103      	bne.n	8000ed6 <sbrk_aligned+0x26>
 8000ece:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	bd70      	pop	{r4, r5, r6, pc}
 8000ed6:	1cc4      	adds	r4, r0, #3
 8000ed8:	f024 0403 	bic.w	r4, r4, #3
 8000edc:	42a0      	cmp	r0, r4
 8000ede:	d0f8      	beq.n	8000ed2 <sbrk_aligned+0x22>
 8000ee0:	1a21      	subs	r1, r4, r0
 8000ee2:	4628      	mov	r0, r5
 8000ee4:	f000 f9c2 	bl	800126c <_sbrk_r>
 8000ee8:	3001      	adds	r0, #1
 8000eea:	d1f2      	bne.n	8000ed2 <sbrk_aligned+0x22>
 8000eec:	e7ef      	b.n	8000ece <sbrk_aligned+0x1e>
 8000eee:	bf00      	nop
 8000ef0:	200001c0 	.word	0x200001c0

08000ef4 <_malloc_r>:
 8000ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ef8:	1ccd      	adds	r5, r1, #3
 8000efa:	f025 0503 	bic.w	r5, r5, #3
 8000efe:	3508      	adds	r5, #8
 8000f00:	2d0c      	cmp	r5, #12
 8000f02:	bf38      	it	cc
 8000f04:	250c      	movcc	r5, #12
 8000f06:	2d00      	cmp	r5, #0
 8000f08:	4606      	mov	r6, r0
 8000f0a:	db01      	blt.n	8000f10 <_malloc_r+0x1c>
 8000f0c:	42a9      	cmp	r1, r5
 8000f0e:	d904      	bls.n	8000f1a <_malloc_r+0x26>
 8000f10:	230c      	movs	r3, #12
 8000f12:	6033      	str	r3, [r6, #0]
 8000f14:	2000      	movs	r0, #0
 8000f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000ff0 <_malloc_r+0xfc>
 8000f1e:	f000 f869 	bl	8000ff4 <__malloc_lock>
 8000f22:	f8d8 3000 	ldr.w	r3, [r8]
 8000f26:	461c      	mov	r4, r3
 8000f28:	bb44      	cbnz	r4, 8000f7c <_malloc_r+0x88>
 8000f2a:	4629      	mov	r1, r5
 8000f2c:	4630      	mov	r0, r6
 8000f2e:	f7ff ffbf 	bl	8000eb0 <sbrk_aligned>
 8000f32:	1c43      	adds	r3, r0, #1
 8000f34:	4604      	mov	r4, r0
 8000f36:	d158      	bne.n	8000fea <_malloc_r+0xf6>
 8000f38:	f8d8 4000 	ldr.w	r4, [r8]
 8000f3c:	4627      	mov	r7, r4
 8000f3e:	2f00      	cmp	r7, #0
 8000f40:	d143      	bne.n	8000fca <_malloc_r+0xd6>
 8000f42:	2c00      	cmp	r4, #0
 8000f44:	d04b      	beq.n	8000fde <_malloc_r+0xea>
 8000f46:	6823      	ldr	r3, [r4, #0]
 8000f48:	4639      	mov	r1, r7
 8000f4a:	4630      	mov	r0, r6
 8000f4c:	eb04 0903 	add.w	r9, r4, r3
 8000f50:	f000 f98c 	bl	800126c <_sbrk_r>
 8000f54:	4581      	cmp	r9, r0
 8000f56:	d142      	bne.n	8000fde <_malloc_r+0xea>
 8000f58:	6821      	ldr	r1, [r4, #0]
 8000f5a:	1a6d      	subs	r5, r5, r1
 8000f5c:	4629      	mov	r1, r5
 8000f5e:	4630      	mov	r0, r6
 8000f60:	f7ff ffa6 	bl	8000eb0 <sbrk_aligned>
 8000f64:	3001      	adds	r0, #1
 8000f66:	d03a      	beq.n	8000fde <_malloc_r+0xea>
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	442b      	add	r3, r5
 8000f6c:	6023      	str	r3, [r4, #0]
 8000f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	bb62      	cbnz	r2, 8000fd0 <_malloc_r+0xdc>
 8000f76:	f8c8 7000 	str.w	r7, [r8]
 8000f7a:	e00f      	b.n	8000f9c <_malloc_r+0xa8>
 8000f7c:	6822      	ldr	r2, [r4, #0]
 8000f7e:	1b52      	subs	r2, r2, r5
 8000f80:	d420      	bmi.n	8000fc4 <_malloc_r+0xd0>
 8000f82:	2a0b      	cmp	r2, #11
 8000f84:	d917      	bls.n	8000fb6 <_malloc_r+0xc2>
 8000f86:	1961      	adds	r1, r4, r5
 8000f88:	42a3      	cmp	r3, r4
 8000f8a:	6025      	str	r5, [r4, #0]
 8000f8c:	bf18      	it	ne
 8000f8e:	6059      	strne	r1, [r3, #4]
 8000f90:	6863      	ldr	r3, [r4, #4]
 8000f92:	bf08      	it	eq
 8000f94:	f8c8 1000 	streq.w	r1, [r8]
 8000f98:	5162      	str	r2, [r4, r5]
 8000f9a:	604b      	str	r3, [r1, #4]
 8000f9c:	4630      	mov	r0, r6
 8000f9e:	f000 f82f 	bl	8001000 <__malloc_unlock>
 8000fa2:	f104 000b 	add.w	r0, r4, #11
 8000fa6:	1d23      	adds	r3, r4, #4
 8000fa8:	f020 0007 	bic.w	r0, r0, #7
 8000fac:	1ac2      	subs	r2, r0, r3
 8000fae:	bf1c      	itt	ne
 8000fb0:	1a1b      	subne	r3, r3, r0
 8000fb2:	50a3      	strne	r3, [r4, r2]
 8000fb4:	e7af      	b.n	8000f16 <_malloc_r+0x22>
 8000fb6:	6862      	ldr	r2, [r4, #4]
 8000fb8:	42a3      	cmp	r3, r4
 8000fba:	bf0c      	ite	eq
 8000fbc:	f8c8 2000 	streq.w	r2, [r8]
 8000fc0:	605a      	strne	r2, [r3, #4]
 8000fc2:	e7eb      	b.n	8000f9c <_malloc_r+0xa8>
 8000fc4:	4623      	mov	r3, r4
 8000fc6:	6864      	ldr	r4, [r4, #4]
 8000fc8:	e7ae      	b.n	8000f28 <_malloc_r+0x34>
 8000fca:	463c      	mov	r4, r7
 8000fcc:	687f      	ldr	r7, [r7, #4]
 8000fce:	e7b6      	b.n	8000f3e <_malloc_r+0x4a>
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d1fb      	bne.n	8000fd0 <_malloc_r+0xdc>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	6053      	str	r3, [r2, #4]
 8000fdc:	e7de      	b.n	8000f9c <_malloc_r+0xa8>
 8000fde:	230c      	movs	r3, #12
 8000fe0:	6033      	str	r3, [r6, #0]
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	f000 f80c 	bl	8001000 <__malloc_unlock>
 8000fe8:	e794      	b.n	8000f14 <_malloc_r+0x20>
 8000fea:	6005      	str	r5, [r0, #0]
 8000fec:	e7d6      	b.n	8000f9c <_malloc_r+0xa8>
 8000fee:	bf00      	nop
 8000ff0:	200001c4 	.word	0x200001c4

08000ff4 <__malloc_lock>:
 8000ff4:	4801      	ldr	r0, [pc, #4]	@ (8000ffc <__malloc_lock+0x8>)
 8000ff6:	f7ff bf0e 	b.w	8000e16 <__retarget_lock_acquire_recursive>
 8000ffa:	bf00      	nop
 8000ffc:	200001bc 	.word	0x200001bc

08001000 <__malloc_unlock>:
 8001000:	4801      	ldr	r0, [pc, #4]	@ (8001008 <__malloc_unlock+0x8>)
 8001002:	f7ff bf09 	b.w	8000e18 <__retarget_lock_release_recursive>
 8001006:	bf00      	nop
 8001008:	200001bc 	.word	0x200001bc

0800100c <__sflush_r>:
 800100c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001014:	0716      	lsls	r6, r2, #28
 8001016:	4605      	mov	r5, r0
 8001018:	460c      	mov	r4, r1
 800101a:	d454      	bmi.n	80010c6 <__sflush_r+0xba>
 800101c:	684b      	ldr	r3, [r1, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	dc02      	bgt.n	8001028 <__sflush_r+0x1c>
 8001022:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001024:	2b00      	cmp	r3, #0
 8001026:	dd48      	ble.n	80010ba <__sflush_r+0xae>
 8001028:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800102a:	2e00      	cmp	r6, #0
 800102c:	d045      	beq.n	80010ba <__sflush_r+0xae>
 800102e:	2300      	movs	r3, #0
 8001030:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001034:	682f      	ldr	r7, [r5, #0]
 8001036:	6a21      	ldr	r1, [r4, #32]
 8001038:	602b      	str	r3, [r5, #0]
 800103a:	d030      	beq.n	800109e <__sflush_r+0x92>
 800103c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800103e:	89a3      	ldrh	r3, [r4, #12]
 8001040:	0759      	lsls	r1, r3, #29
 8001042:	d505      	bpl.n	8001050 <__sflush_r+0x44>
 8001044:	6863      	ldr	r3, [r4, #4]
 8001046:	1ad2      	subs	r2, r2, r3
 8001048:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800104a:	b10b      	cbz	r3, 8001050 <__sflush_r+0x44>
 800104c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800104e:	1ad2      	subs	r2, r2, r3
 8001050:	2300      	movs	r3, #0
 8001052:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001054:	6a21      	ldr	r1, [r4, #32]
 8001056:	4628      	mov	r0, r5
 8001058:	47b0      	blx	r6
 800105a:	1c43      	adds	r3, r0, #1
 800105c:	89a3      	ldrh	r3, [r4, #12]
 800105e:	d106      	bne.n	800106e <__sflush_r+0x62>
 8001060:	6829      	ldr	r1, [r5, #0]
 8001062:	291d      	cmp	r1, #29
 8001064:	d82b      	bhi.n	80010be <__sflush_r+0xb2>
 8001066:	4a2a      	ldr	r2, [pc, #168]	@ (8001110 <__sflush_r+0x104>)
 8001068:	410a      	asrs	r2, r1
 800106a:	07d6      	lsls	r6, r2, #31
 800106c:	d427      	bmi.n	80010be <__sflush_r+0xb2>
 800106e:	2200      	movs	r2, #0
 8001070:	6062      	str	r2, [r4, #4]
 8001072:	04d9      	lsls	r1, r3, #19
 8001074:	6922      	ldr	r2, [r4, #16]
 8001076:	6022      	str	r2, [r4, #0]
 8001078:	d504      	bpl.n	8001084 <__sflush_r+0x78>
 800107a:	1c42      	adds	r2, r0, #1
 800107c:	d101      	bne.n	8001082 <__sflush_r+0x76>
 800107e:	682b      	ldr	r3, [r5, #0]
 8001080:	b903      	cbnz	r3, 8001084 <__sflush_r+0x78>
 8001082:	6560      	str	r0, [r4, #84]	@ 0x54
 8001084:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001086:	602f      	str	r7, [r5, #0]
 8001088:	b1b9      	cbz	r1, 80010ba <__sflush_r+0xae>
 800108a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800108e:	4299      	cmp	r1, r3
 8001090:	d002      	beq.n	8001098 <__sflush_r+0x8c>
 8001092:	4628      	mov	r0, r5
 8001094:	f7ff fec2 	bl	8000e1c <_free_r>
 8001098:	2300      	movs	r3, #0
 800109a:	6363      	str	r3, [r4, #52]	@ 0x34
 800109c:	e00d      	b.n	80010ba <__sflush_r+0xae>
 800109e:	2301      	movs	r3, #1
 80010a0:	4628      	mov	r0, r5
 80010a2:	47b0      	blx	r6
 80010a4:	4602      	mov	r2, r0
 80010a6:	1c50      	adds	r0, r2, #1
 80010a8:	d1c9      	bne.n	800103e <__sflush_r+0x32>
 80010aa:	682b      	ldr	r3, [r5, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0c6      	beq.n	800103e <__sflush_r+0x32>
 80010b0:	2b1d      	cmp	r3, #29
 80010b2:	d001      	beq.n	80010b8 <__sflush_r+0xac>
 80010b4:	2b16      	cmp	r3, #22
 80010b6:	d11e      	bne.n	80010f6 <__sflush_r+0xea>
 80010b8:	602f      	str	r7, [r5, #0]
 80010ba:	2000      	movs	r0, #0
 80010bc:	e022      	b.n	8001104 <__sflush_r+0xf8>
 80010be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	e01b      	b.n	80010fe <__sflush_r+0xf2>
 80010c6:	690f      	ldr	r7, [r1, #16]
 80010c8:	2f00      	cmp	r7, #0
 80010ca:	d0f6      	beq.n	80010ba <__sflush_r+0xae>
 80010cc:	0793      	lsls	r3, r2, #30
 80010ce:	680e      	ldr	r6, [r1, #0]
 80010d0:	bf08      	it	eq
 80010d2:	694b      	ldreq	r3, [r1, #20]
 80010d4:	600f      	str	r7, [r1, #0]
 80010d6:	bf18      	it	ne
 80010d8:	2300      	movne	r3, #0
 80010da:	eba6 0807 	sub.w	r8, r6, r7
 80010de:	608b      	str	r3, [r1, #8]
 80010e0:	f1b8 0f00 	cmp.w	r8, #0
 80010e4:	dde9      	ble.n	80010ba <__sflush_r+0xae>
 80010e6:	6a21      	ldr	r1, [r4, #32]
 80010e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80010ea:	4643      	mov	r3, r8
 80010ec:	463a      	mov	r2, r7
 80010ee:	4628      	mov	r0, r5
 80010f0:	47b0      	blx	r6
 80010f2:	2800      	cmp	r0, #0
 80010f4:	dc08      	bgt.n	8001108 <__sflush_r+0xfc>
 80010f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010fe:	81a3      	strh	r3, [r4, #12]
 8001100:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001108:	4407      	add	r7, r0
 800110a:	eba8 0800 	sub.w	r8, r8, r0
 800110e:	e7e7      	b.n	80010e0 <__sflush_r+0xd4>
 8001110:	dfbffffe 	.word	0xdfbffffe

08001114 <_fflush_r>:
 8001114:	b538      	push	{r3, r4, r5, lr}
 8001116:	690b      	ldr	r3, [r1, #16]
 8001118:	4605      	mov	r5, r0
 800111a:	460c      	mov	r4, r1
 800111c:	b913      	cbnz	r3, 8001124 <_fflush_r+0x10>
 800111e:	2500      	movs	r5, #0
 8001120:	4628      	mov	r0, r5
 8001122:	bd38      	pop	{r3, r4, r5, pc}
 8001124:	b118      	cbz	r0, 800112e <_fflush_r+0x1a>
 8001126:	6a03      	ldr	r3, [r0, #32]
 8001128:	b90b      	cbnz	r3, 800112e <_fflush_r+0x1a>
 800112a:	f7ff fc8f 	bl	8000a4c <__sinit>
 800112e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0f3      	beq.n	800111e <_fflush_r+0xa>
 8001136:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001138:	07d0      	lsls	r0, r2, #31
 800113a:	d404      	bmi.n	8001146 <_fflush_r+0x32>
 800113c:	0599      	lsls	r1, r3, #22
 800113e:	d402      	bmi.n	8001146 <_fflush_r+0x32>
 8001140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001142:	f7ff fe68 	bl	8000e16 <__retarget_lock_acquire_recursive>
 8001146:	4628      	mov	r0, r5
 8001148:	4621      	mov	r1, r4
 800114a:	f7ff ff5f 	bl	800100c <__sflush_r>
 800114e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001150:	07da      	lsls	r2, r3, #31
 8001152:	4605      	mov	r5, r0
 8001154:	d4e4      	bmi.n	8001120 <_fflush_r+0xc>
 8001156:	89a3      	ldrh	r3, [r4, #12]
 8001158:	059b      	lsls	r3, r3, #22
 800115a:	d4e1      	bmi.n	8001120 <_fflush_r+0xc>
 800115c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800115e:	f7ff fe5b 	bl	8000e18 <__retarget_lock_release_recursive>
 8001162:	e7dd      	b.n	8001120 <_fflush_r+0xc>

08001164 <__swhatbuf_r>:
 8001164:	b570      	push	{r4, r5, r6, lr}
 8001166:	460c      	mov	r4, r1
 8001168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800116c:	2900      	cmp	r1, #0
 800116e:	b096      	sub	sp, #88	@ 0x58
 8001170:	4615      	mov	r5, r2
 8001172:	461e      	mov	r6, r3
 8001174:	da0d      	bge.n	8001192 <__swhatbuf_r+0x2e>
 8001176:	89a3      	ldrh	r3, [r4, #12]
 8001178:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800117c:	f04f 0100 	mov.w	r1, #0
 8001180:	bf14      	ite	ne
 8001182:	2340      	movne	r3, #64	@ 0x40
 8001184:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001188:	2000      	movs	r0, #0
 800118a:	6031      	str	r1, [r6, #0]
 800118c:	602b      	str	r3, [r5, #0]
 800118e:	b016      	add	sp, #88	@ 0x58
 8001190:	bd70      	pop	{r4, r5, r6, pc}
 8001192:	466a      	mov	r2, sp
 8001194:	f000 f848 	bl	8001228 <_fstat_r>
 8001198:	2800      	cmp	r0, #0
 800119a:	dbec      	blt.n	8001176 <__swhatbuf_r+0x12>
 800119c:	9901      	ldr	r1, [sp, #4]
 800119e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80011a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80011a6:	4259      	negs	r1, r3
 80011a8:	4159      	adcs	r1, r3
 80011aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ae:	e7eb      	b.n	8001188 <__swhatbuf_r+0x24>

080011b0 <__smakebuf_r>:
 80011b0:	898b      	ldrh	r3, [r1, #12]
 80011b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80011b4:	079d      	lsls	r5, r3, #30
 80011b6:	4606      	mov	r6, r0
 80011b8:	460c      	mov	r4, r1
 80011ba:	d507      	bpl.n	80011cc <__smakebuf_r+0x1c>
 80011bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80011c0:	6023      	str	r3, [r4, #0]
 80011c2:	6123      	str	r3, [r4, #16]
 80011c4:	2301      	movs	r3, #1
 80011c6:	6163      	str	r3, [r4, #20]
 80011c8:	b003      	add	sp, #12
 80011ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011cc:	ab01      	add	r3, sp, #4
 80011ce:	466a      	mov	r2, sp
 80011d0:	f7ff ffc8 	bl	8001164 <__swhatbuf_r>
 80011d4:	9f00      	ldr	r7, [sp, #0]
 80011d6:	4605      	mov	r5, r0
 80011d8:	4639      	mov	r1, r7
 80011da:	4630      	mov	r0, r6
 80011dc:	f7ff fe8a 	bl	8000ef4 <_malloc_r>
 80011e0:	b948      	cbnz	r0, 80011f6 <__smakebuf_r+0x46>
 80011e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011e6:	059a      	lsls	r2, r3, #22
 80011e8:	d4ee      	bmi.n	80011c8 <__smakebuf_r+0x18>
 80011ea:	f023 0303 	bic.w	r3, r3, #3
 80011ee:	f043 0302 	orr.w	r3, r3, #2
 80011f2:	81a3      	strh	r3, [r4, #12]
 80011f4:	e7e2      	b.n	80011bc <__smakebuf_r+0xc>
 80011f6:	89a3      	ldrh	r3, [r4, #12]
 80011f8:	6020      	str	r0, [r4, #0]
 80011fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011fe:	81a3      	strh	r3, [r4, #12]
 8001200:	9b01      	ldr	r3, [sp, #4]
 8001202:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001206:	b15b      	cbz	r3, 8001220 <__smakebuf_r+0x70>
 8001208:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800120c:	4630      	mov	r0, r6
 800120e:	f000 f81d 	bl	800124c <_isatty_r>
 8001212:	b128      	cbz	r0, 8001220 <__smakebuf_r+0x70>
 8001214:	89a3      	ldrh	r3, [r4, #12]
 8001216:	f023 0303 	bic.w	r3, r3, #3
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	81a3      	strh	r3, [r4, #12]
 8001220:	89a3      	ldrh	r3, [r4, #12]
 8001222:	431d      	orrs	r5, r3
 8001224:	81a5      	strh	r5, [r4, #12]
 8001226:	e7cf      	b.n	80011c8 <__smakebuf_r+0x18>

08001228 <_fstat_r>:
 8001228:	b538      	push	{r3, r4, r5, lr}
 800122a:	4d07      	ldr	r5, [pc, #28]	@ (8001248 <_fstat_r+0x20>)
 800122c:	2300      	movs	r3, #0
 800122e:	4604      	mov	r4, r0
 8001230:	4608      	mov	r0, r1
 8001232:	4611      	mov	r1, r2
 8001234:	602b      	str	r3, [r5, #0]
 8001236:	f7ff faf4 	bl	8000822 <_fstat>
 800123a:	1c43      	adds	r3, r0, #1
 800123c:	d102      	bne.n	8001244 <_fstat_r+0x1c>
 800123e:	682b      	ldr	r3, [r5, #0]
 8001240:	b103      	cbz	r3, 8001244 <_fstat_r+0x1c>
 8001242:	6023      	str	r3, [r4, #0]
 8001244:	bd38      	pop	{r3, r4, r5, pc}
 8001246:	bf00      	nop
 8001248:	200001b8 	.word	0x200001b8

0800124c <_isatty_r>:
 800124c:	b538      	push	{r3, r4, r5, lr}
 800124e:	4d06      	ldr	r5, [pc, #24]	@ (8001268 <_isatty_r+0x1c>)
 8001250:	2300      	movs	r3, #0
 8001252:	4604      	mov	r4, r0
 8001254:	4608      	mov	r0, r1
 8001256:	602b      	str	r3, [r5, #0]
 8001258:	f7ff faf3 	bl	8000842 <_isatty>
 800125c:	1c43      	adds	r3, r0, #1
 800125e:	d102      	bne.n	8001266 <_isatty_r+0x1a>
 8001260:	682b      	ldr	r3, [r5, #0]
 8001262:	b103      	cbz	r3, 8001266 <_isatty_r+0x1a>
 8001264:	6023      	str	r3, [r4, #0]
 8001266:	bd38      	pop	{r3, r4, r5, pc}
 8001268:	200001b8 	.word	0x200001b8

0800126c <_sbrk_r>:
 800126c:	b538      	push	{r3, r4, r5, lr}
 800126e:	4d06      	ldr	r5, [pc, #24]	@ (8001288 <_sbrk_r+0x1c>)
 8001270:	2300      	movs	r3, #0
 8001272:	4604      	mov	r4, r0
 8001274:	4608      	mov	r0, r1
 8001276:	602b      	str	r3, [r5, #0]
 8001278:	f7ff fafc 	bl	8000874 <_sbrk>
 800127c:	1c43      	adds	r3, r0, #1
 800127e:	d102      	bne.n	8001286 <_sbrk_r+0x1a>
 8001280:	682b      	ldr	r3, [r5, #0]
 8001282:	b103      	cbz	r3, 8001286 <_sbrk_r+0x1a>
 8001284:	6023      	str	r3, [r4, #0]
 8001286:	bd38      	pop	{r3, r4, r5, pc}
 8001288:	200001b8 	.word	0x200001b8

0800128c <_init>:
 800128c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800128e:	bf00      	nop
 8001290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001292:	bc08      	pop	{r3}
 8001294:	469e      	mov	lr, r3
 8001296:	4770      	bx	lr

08001298 <_fini>:
 8001298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129a:	bf00      	nop
 800129c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800129e:	bc08      	pop	{r3}
 80012a0:	469e      	mov	lr, r3
 80012a2:	4770      	bx	lr
